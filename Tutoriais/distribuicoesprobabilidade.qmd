---
title: "Manipulação e Amostragem de Variáveis Aleatórias"
description: |
  Distribuições de probabilidade são a base para muitas análises estatísticas, e seu entendimento é fundamental para realizar até os modelos mais básicos. Este é um guia completo de como trabalhar com inúmeras distribuições de probabilidade em `Julia`, explorando estatísticas descritivas, amostragem e estimação. 
categories:
  - Primeiros Passos
  - Variáveis Aleatórias
  - Ferramentas
author:
  - name: Vitor Ribas Perrone
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/VitorRibasP
    orcid: 0009-0009-6923-7712 
  - name: Nicole Fredericci
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/NFredericci
date: "2025-10-27"
image: imagens/distribuicoesprobabilidade.png
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
engine: knitr
draft: false
---

## Introdução

:::{.justify}
Distribuições de probabilidade são a base para muitas análises estatísticas, pois descrevem como os dados podem variar e quais valores são mais ou menos prováveis de ocorrer. Entender e manipular essas distribuições é fundamental para realizar desde análises simples até modelos estatísticos mais avançados.

Com `Julia`, trabalhar com distribuições é rápido, intuitivo e flexível. A linguagem oferece uma variedade enorme de distribuições de diversos tipos, todas acessíveis por meio de uma sintaxe simples e direta. Além disso, é possível gerar amostras, calcular estatísticas importantes e visualizar comportamentos probabilísticos com facilidade.

Neste post, vamos apresentar os conceitos básicos das distribuições de probabilidade em `Julia` e mostrar como criar, manipular e amostrar destas distribuições usando exemplos práticos.
:::

## Instalação

:::{.justify}
Em primeiro lugar, vamos instalar e carregar os pacotes que serão utilizados nos exemplos:
:::

```{julia}
Pkg.add(["Distributions", "Random", "StatsBase", "StatsPlots", "Statistics", "DataFrames"])

using Distributions, Random, StatsBase, StatsPlots, Statistics, DataFrames
```

## Reprodutibilidade

:::{.justify}
Ao lidar com números pseudoaleatórios, garantir a reprodutibilidade dos resultados é fundamental. Para isso, fixamos uma semente antes de executar qualquer procedimento que envolva aleatoriedade. A função `Random.seed!` permite definir essa semente, assegurando que qualquer execução do código produza resultados idênticos.
:::

```{julia}
Random.seed!(123)
```

## Realização de sorteios

:::{.justify}
Antes de abordarmos as distribuições de probabilidade, vamos exemplificar como realizar sorteios simples a partir de um vetor. Essa funcionalidade é muito útil para gerar amostras, com ou sem reposição. Inicialmente, criamos um vetor com quatro elementos:
:::

```{julia}
vetor = ["A", "B", "C", "D"]
```

:::{.justify}
Dessa forma, para realizar um sorteio, basta utilizar a função `sample` e especificar o tamanho da amostra. Já para determinar se será com ou sem reposição, basta alterar o argumento `replace`, tendo em mente que o padrão é `replace = false` — ou seja, sem reposição.
:::

```{julia}
sample(vetor, 2)
sample(vetor, 10, replace = true)
```

## Variáveis aleatórias

:::{.justify}
O pacote `Distributions` oferece uma ampla variedade de ferramentas para trabalhar com variáveis aleatórias de diferentes tipos. Ele permite criar objetos que representam distribuições de probabilidade, possibilitando a aplicação de diversas funções e operações diretamente sobre elas. A seguir, exploraremos algumas das distribuições disponíveis.
:::

### Contínuas

:::{.justify}
Algumas das distribuições contínuas disponíveis pelo pacote são:
:::

```{julia}
Normal(0,1)
Beta(2,2)
Cauchy(0,1)
Chisq(3) #Qui Quadrado
Exponential(2) 
Gamma(2,1) 
TDist(2) #T-Student
Uniform(0,1) 
Weibull(2,3)
```

### Discretas

:::{.justify}
Algumas das distribuições discretas disponíveis pelo pacote são:
:::

```{julia}
Bernoulli(0.8)
Binomial(10,0.5)
DiscreteUniform(0,10)
Geometric(0.7)
Hypergeometric(5, 10, 3)
NegativeBinomial(5, 0.5)
Poisson(5)
```

### Multivariadas

:::{.justify}
Algumas das distribuições multivariadas disponíveis pelo pacote são:
:::

```{julia}
Multinomial(10, [0.1, 0.2, 0.7])
MvNormal([0, 1], [1 0.6 ; 0.6 2]) #Normal Multivariada
Dirichlet([0.1, 0.2, 0.7])
```

### Truncadas

:::{.justify}
Além das distribuições clássicas, o pacote permite o uso de distribuições truncadas, ou seja, com o suporte restringido a um intervalo específico. Para isso, utilizamos a função `truncated` com os limites desejados:
:::

```{julia}
truncated(Normal(0,1), -50, 50) #Limites inferior e superior, respectivamente
truncated(Poisson(3), lower = 2) #Poisson Truncada Inferiormente
truncated(Exponential(5), upper = 50) #Exponencial Truncada Superiormente
```

### Mistas

:::{.justify}
Também é possível trabalhar com distribuições mistas, que combinam componentes de distribuições discretas e contínuas. Utilizamos a função `MixtureModel` para definir essas misturas. Para exemplificar seu funcionamento, vamos definir uma variável aleatória que segue uma Normal($-2,2$) com probabilidade $0.25$, uma Normal($0,1$) com probabilidade $0.45$ e uma Normal($3,5$) com probabilidade $0.3$.
:::

```{julia}
MixtureModel(Normal[Normal(-2, 2),
                    Normal(0, 1),
                    Normal(3, 5)], 
                   [0.25, 0.45, 0.3])
```

### Estatísticas de ordem

:::{.justify}
O pacote permite ainda a definição de distribuições de estatísticas de ordem, que são distribuições associadas a valores ordenados da amostra, como mínimo, mediana e máximo. No código a seguir, estamos analisando a distribuição dessas três estatísticas para amostras da Normal padrão, todas de tamanho $11$.
:::

```{julia}
# Distribuição do Mínimo 
OrderStatistic(Normal(0,1), 11, 1)
# Distribuição da Mediana 
OrderStatistic(Normal(0,1), 11, 6) 
# Distribuição do Máximo 
OrderStatistic(Normal(0,1), 11, 11)
# Distribuição conjunta do Mínimo, Mediana e Máximo 
JointOrderStatistics(Normal(0,1), 11, (1, 6, 11))
```

## Manipulação e amostragem

:::{.justify}
Com isso, algumas das distribuições disponíveis no pacote `Distributions` já foram apresentadas; para ver na íntegra todas as distribuições contidas nele, basta acessar a [documentação oficial](https://juliastats.org/Distributions.jl/stable/) do pacote. Para explorar as demais funções de `Distributions`, vamos utilizar a distribuição Normal padrão.

Primeiro, vamos criar o objeto `DistribuicaoNormal` a partir da seguinte linha de código:
:::

```{julia}
DistribuicaoNormal = Normal(0,1)
```

### Estatísticas descritivas

:::{.justify}
Algumas das estatísticas descritivas que podemos utilizar são:
:::

```{julia}
mean(DistribuicaoNormal) # Média
median(DistribuicaoNormal) # Mediana
mode(DistribuicaoNormal) # Moda
std(DistribuicaoNormal) # Desvio Padrão
var(DistribuicaoNormal) # Variância
quantile(DistribuicaoNormal, 0.25) # Quantil
skewness(DistribuicaoNormal) # Assimetria
kurtosis(DistribuicaoNormal) # Curtose
entropy(DistribuicaoNormal) # Entropia
minimum(DistribuicaoNormal) # Mínimo
maximum(DistribuicaoNormal) # Máximo
```

### Funções

:::{.justify}
Além disso, também podemos aplicar funções vinculadas à distribuição, como:
:::

```{julia}
pdf(DistribuicaoNormal, 0) # Densidade
logpdf(DistribuicaoNormal, 0) # LogDensidade
cdf(DistribuicaoNormal, 0) # Função de Distribuição Acumulada
```

### Amostragem

:::{.justify}
Para gerar amostras da distribuição, utilizamos a função `rand`. Por exemplo, uma amostra de tamanho $4$ da Normal padrão pode ser obtida a partir de:
:::

```{julia}
rand(DistribuicaoNormal, 4)
```

### Visualização

:::{.justify}
A densidade da distribuição pode ser visualizada com a função `plot`:
:::

```{julia}
plot(DistribuicaoNormal, 
     title = "Densidade da Distribuição Normal Padrão", 
     legend = false, 
     size = (800, 500))
```

### Estimação

:::{.justify}
Uma funcionalidade importante é a estimação de parâmetros via __Máxima Verossimilhança__ a partir de amostras geradas. Por exemplo, vamos gerar $100$ amostras da Normal com $\mu=2$ e $\sigma=5$, e $10$ amostras da Binomial com $n=25$ e $p=0.7$, e salvá-las em objetos distintos:
:::

```{julia}
amostra_normal = rand(Normal(2,5), 100)
amostra_binomial = rand(Binomial(25, 0.7), 10)
```

:::{.justify}
Utilizamos a função `fit_mle` para estimar os parâmetros dessas distribuições a partir dos dados:
:::

```{julia}
fit_mle(Normal, amostra_normal)
fit_mle(Binomial, 25, amostra_binomial)
```

## Comparação

:::{.justify}
Para aplicar os conceitos vistos, vamos gerar amostras de tamanhos distintos da Normal padrão e comparar suas estatísticas descritivas com as da distribuição teórica. Em primeiro lugar, vamos gerar $10$, $100$ e $1000$ amostras a partir do seguinte código:
:::

```{julia}
DistribuicaoNormal = Normal(0, 1)
amostra10 = rand(DistribuicaoNormal, 10)
amostra100 = rand(DistribuicaoNormal, 100)
amostra1000 = rand(DistribuicaoNormal, 1000)
```

:::{.justify}
Em seguida, calculamos as estatísticas e organizamos os resultados em uma tabela para facilitar a comparação. A função `estatisticas` foi criada para computar as principais medidas (média, mediana, desvio padrão, mínimo e máximo) e facilitar o processo:
:::

```{julia}
# Função para calcular estatísticas descritivas de um vetor
function estatisticas(vetor)
    return (
        media = mean(vetor),
        mediana = median(vetor),
        desvio = std(vetor),
        minimo = minimum(vetor),
        maximo = maximum(vetor)
        )
    end
# Cálculo das estatísticas da distribuição teórica
teoricas = (
    media = mean(DistribuicaoNormal),
    mediana = median(DistribuicaoNormal),
    desvio = std(DistribuicaoNormal),
    minimo = -Inf,
    maximo = Inf)
# Tabela de resultados
DataFrame(
    Estatística = ["Média", "Mediana", "Desvio Padrão", "Mínimo", "Máximo"],
    Amostra10 = collect(estatisticas(amostra10)),
    Amostra100 = collect(estatisticas(amostra100)),
    Amostra1000 = collect(estatisticas(amostra1000)),
    Distribuição = [teoricas.media, 
                    teoricas.mediana, 
                    teoricas.desvio, 
                    teoricas.minimo, 
                    teoricas.maximo])
```

:::{.justify}
A partir da tabela criada, fica evidente que as nossas estatísticas descritivas ficam mais próximas do valor teórico quanto maior for o tamanho da amostra.
:::

## Conclusão

:::{.justify}
Agora que você viu como criar, manipular e amostrar diversas distribuições de probabilidade em `Julia`, já pode aplicar esses conceitos em seus próprios projetos. Com a eficiência e simplicidade da linguagem, fica muito mais fácil trabalhar com simulações, inferência estatística e até mesmo métodos avançados como _Bootstrap_ e _MCMC_ (Cadeia de Markov Monte Carlo). Continue explorando, praticando e aproveitando tudo que `Julia` oferece para a estatística!
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.
:::
