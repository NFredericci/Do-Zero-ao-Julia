{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Tutorial de como contruir gráficos com o Pacote Makie.jl\"\n",
        "description: |\n",
        "  Tutorial de criação de gráficos simples e avançados com o pacote Makie.jl\n",
        "categories:\n",
        "  - Gráficos\n",
        "author:\n",
        "  - name: Esther Cleveston\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    orcid: 0009-0008-6612-8417\n",
        "date: \"2025-07-23\"\n",
        "image: imagens/pacote_makie_capa.png ALTERARRR\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "\n",
        "::: justify\n",
        "O Makie.jl é um pacote de gráficos da linguagem Julia que se destaca pela sua flexibilidade e pela grande variedade de funcionalidades. Com ele, é possível criar desde visualizações bem simples, como gráficos de barras e linhas, até gráficos mais avançados, como visualizações em 3D e animações. O pacote oferece diferentes backends, como o CairoMakie e o GLMakie, que permitem gerar tanto gráficos estáticos quanto gráficos interativos.\n",
        "\n",
        "Neste tutorial, vamos mostrar alguns exemplos que ajudam a entender como o Makie funciona, explorando algumas visualizações básicas, como histogramas e gráficos de dispersão, e também um exemplo mais avançado como gráfico de linhas em 3D.\n",
        ":::\n",
        "\n",
        "## Instalar os pacotes\n",
        "\n",
        "::: justify\n",
        "Para instalar os pacotes que serão utilizados, execute as seguintes linhas de código:\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "pkg.add(\"Makie\") \n",
        "using Makie \n",
        "pkg.add(\"CairoMakie\") \n",
        "using CairoMakie\n",
        "pkg.add(\"GLMakie\")\n",
        "using GLMakie\n",
        "```\n",
        "\n",
        "\n",
        "## Gráfico de Dispersão\n",
        "\n",
        "::: justify\n",
        "Podemos fazer um scatterplot (Gráfico de Dispersão) com o código abaixo. Neste caso, para o eixo X utilizamos valores de 1 até 10 e para o eixo Y geramos aleatoriamente 10 números entre 0 e 1.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "x = 1:10 \n",
        "y = rand(10)\n",
        "\n",
        "fig = scatter(x, y,\n",
        "    color = :green,\n",
        "    markersize = 15,\n",
        "    label = \"Dados Aleatórios\",\n",
        "    axis = (\n",
        "        title = \"Gráfico de Dispersão\",\n",
        "        xlabel = \"Eixo X\",\n",
        "        ylabel = \"Eixo Y\"\n",
        "    )\n",
        ")\n",
        "fig\n",
        "save(\"makie_dispersao.png\", fig)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "A função save será utilizada em todos os gráficos deste tutorial, mas apenas mostraremos ela neste código.\n",
        ":::\n",
        "\n",
        "![](imagens/makie_dispersao.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Gráfico de Barras\n",
        "\n",
        "::: justify\n",
        "Iremos fazer gráfico de barras lado a lado, empilhadas e empilhadas lado a lado. \n",
        "Para o primeiro caso, iremos utilizar o código abaixo. Primeiro criamos uma tabela com as categorias gato indo de 1 até 3, a altura será gerada de 0.1 até 0.9 com incremento de 0.1 e, por fim, a categoria grupo contendo 3 tipos.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "tabela = (gato = [1, 1, 1, 2, 2, 2, 3, 3, 3],\n",
        "       altura = 0.1:0.1:0.9,\n",
        "       grupo = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n",
        "       )\n",
        "barplot(tabela.gato, tabela.altura,\n",
        "        dodge = tabela.grupo,\n",
        "        color = tabela.grupo,\n",
        "        axis = (xticks = (1:3, [\"Esquerda\", \"Meio\", \"Direita\"]),\n",
        "                title = \"Barras Lado a Lado\"),\n",
        "        )\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_barras_lado_a_lado.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "::: justify\n",
        "Para fazermos o gráfico das barras empilhadas iremos utilizar a mesma tabela feita anteriormente e mudaremos o argumento dodge para stack.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "tabela = (gato = [1, 1, 1, 2, 2, 2, 3, 3, 3],\n",
        "       altura = 0.1:0.1:0.9,\n",
        "       grupo = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n",
        "       )\n",
        "barplot(tabela.gato, tabela.altura,\n",
        "        stack = tabela.grupo,\n",
        "        color = tabela.grupo,\n",
        "        axis = (xticks = (1:3, [\"Esquerda\", \"Meio\", \"Direita\"]),\n",
        "                title = \"Barras Empilhadas\"),\n",
        "        )\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_barras_empilhadas.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "::: justify\n",
        "Por fim, iremos fazer uma combinação dos dois últimos gráficos. Para isso, vamos adicionar na tabela duas categorias extras, grupo1 e grupo2, os quais serão utilizados respectivamente nos argumentos dodge e stack.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "tabela = (gato = [1, 1, 1, 2, 2, 2, 3, 3, 3],\n",
        "       altura = 0.1:0.1:0.9,\n",
        "       grupo = [1, 2, 3, 1, 2, 3, 1, 2, 3],\n",
        "       grupo1 = [1, 2, 2, 1, 1, 2, 1, 1, 2],\n",
        "       grupo2 = [1, 1, 2, 1, 2, 1, 1, 2, 1]\n",
        "       )\n",
        "\n",
        "barplot(tabela.gato, tabela.altura,\n",
        "        dodge = tabela.grupo1,\n",
        "        stack = tabela.grupo2,\n",
        "        color = tabela.grupo,\n",
        "        axis = (xticks = (1:3, [\"Esquerda\", \"Meio\", \"Direita\"]),\n",
        "                title = \"Lado a lado e Empilhadas\"),\n",
        "        )\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_barras_lado_empilhadas.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Gráfico BoxPlot\n",
        "\n",
        "::: justify\n",
        "Para a construção do BoxPlot utilizamos o código abaixo. Para o eixo X iremos gerar 1000 valores aleatórios entre 1 e 3 e para o eixo Y iremos gerar 1000 valores aleatórios de uma distribuição normal padrão.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "x = rand(1:3, 1000)\n",
        "y = randn(1000)\n",
        "\n",
        "boxplot(x, y,\n",
        "    color = :green,\n",
        "    markersize = 15,\n",
        "    label = \"Dados Aleatórios\",\n",
        "    axis = (\n",
        "        title = \"BoxPlot\",\n",
        "        xlabel = \"Eixo X\",\n",
        "        ylabel = \"Eixo Y\"))\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_boxplot.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Gráfico de Densidade\n",
        "\n",
        "::: justify\n",
        "Para a construção do Gráfico de Densidade iremos gerar uma curva de densidade de 300 valores aleatórios da normal padrão e atribuir a variável densidade, após isso o ! é utilizado para adicionar a densidade a um gráfico já existente. Por meio dele iremos gerar 300 valores aleatórios e deslocar para a direita, somando 2. O alpha irá definir a transparência da curva.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "densidade = density(randn(300))\n",
        "density!(randn(300) .+ 3, alpha = 0.8)\n",
        "\n",
        "densidade\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_densidade.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Gráfico Histograma\n",
        "\n",
        "::: justify\n",
        "Podemos fazer um Histograma com o código abaixo. Primeiro geramos 1000 amostras aleatórias de uma normal padrão e depois geramos o histograma com 30 colunas.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "dados = randn(1000)\n",
        "hist(dados, bins = 30, color = :green)\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_histograma.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Gráfico de Linhas\n",
        "\n",
        "::: justify\n",
        "O Gráfico de Linhas pode ser feito com o código abaixo. Para o eixo X utilizamos valores de 1 até 10 e para o Eixo Y utilizamos uma lista de valores aleatórios.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "x = 1:10\n",
        "y = [2, 4, 3, 6, 7, 8, 7, 9, 10, 12]\n",
        "\n",
        "lines(x, y,\n",
        "    color = :green,\n",
        "    label = \"Dados Aleatórios\",\n",
        "    axis = (\n",
        "        title = \"Gráfico de Linhas\",\n",
        "        xlabel = \"Eixo X\",\n",
        "        ylabel = \"Eixo Y\"))\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_linhas.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Mais gráficos\n",
        "\n",
        "::: justify\n",
        "Iremos explorar alguns gráficos possíveis de serem feitos com o GLMakie e com o CairoMakie. Para o primeiro exemplo iremos carregar também o pacote DelimitedFiles e iremos acessar a elevação de um terreno, após isso iremos criar o espaço para a figura utilizando Figure() e Axis(). Com a função contourf iremos criar o contorno 10 faixas de valores (altitudes), assim teremos um Gráfico de Contorno.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "pkg.add(\"DelimitedFiles\")\n",
        "using DelimitedFiles\n",
        "\n",
        "vulcao = readdlm(Makie.assetpath(\"volcano.csv\"), ',', Float64)\n",
        "\n",
        "f = Figure()\n",
        "Axis(f[1, 1])\n",
        "contorno = contourf!(vulcao, levels = 10)\n",
        "Colorbar(f[1, 2], contorno)\n",
        "\n",
        "f\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_grafico_contorno.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "::: justify\n",
        "No segundo exemplo iremos construir um Mapa de Calor (Heatmap), para isso definimos os valores do eixo X indo de 1 até 5 e do eixo Y indo de 6 até 10 e depois uma matriz 5x5 com os números indo de 1 até 25 (essa matriz será usada com os valores do heatmap para definir as cores).\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "figura = Figure()\n",
        "ax = Axis(figura[1, 1])\n",
        "\n",
        "centro_x = 1:5\n",
        "centro_y = 6:10\n",
        "dados = reshape(1:25, 5, 5)\n",
        "\n",
        "heatmap!(ax, centro_x, centro_y, dados)\n",
        "\n",
        "figura\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_heatmap.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "::: justify\n",
        "Por fim, no último exemplo iremos fazer um Gráfico de Linhas 3D. Primeiro criamos 100 pontos aleatórios em um espaço 3D e depois geramos outros 100 valores aleatórios. Criamos uma figura e depois desenhamos as linhas conectando os pontos e as cores serão definidas pela variável valores. Por fim, o fxaa = true irá suavizar as linhas.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia, eval = FALSE}\n",
        "pontos = rand(Point3f, 100)\n",
        "valores = rand(100)\n",
        "\n",
        "figura = Figure(size = (600, 650))\n",
        "Label(figura[1, 1], \"base\", tellwidth = false)\n",
        "lines(figura[2, 1], pontos, color = valores, fxaa = true)\n",
        "\n",
        "figura\n",
        "```\n",
        "\n",
        "\n",
        "![](imagens/makie_3D.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        "## Conclusão\n",
        "\n",
        "::: justify\n",
        "O pacote Makie.jl, juntamente com seus backends CairoMakie e GLMakie, oferece uma ampla gama de recursos para a criação de gráficos, indo desde os mais simples até visualizações interativas e 3D. Suas funcionalidades são tantas que seria impossível abordar todas em um único tutorial. Neste material, exploramos apenas algumas delas, com exemplos que vão de gráficos básicos, como barras, histogramas e linhas, até representações mais avançadas, como mapas de calor e gráficos de linhas em 3D.\n",
        ":::\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica, aprimoramento do texto e criação de imagens.\n",
        ":::\n",
        "\n",
        "## Referências utilizadas para a construção do tutorial:\n",
        "\n",
        "::: justify\n",
        "Danisch & Krumbiegel, (2021). Makie.jl: Flexible high-performance data visualization for Julia. Journal of Open Source Software, 6(65), 3349, https://doi.org/10.21105/joss.03349\n",
        ":::"
      ],
      "id": "fd00cb4f"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}