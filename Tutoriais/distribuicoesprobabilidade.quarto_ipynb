{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Manipulação e Amostragem de Variáveis Aleatórias em Julia\"\n",
        "description: \"Um guia completo de como trabalhar com inúmeras distribuições de probabilidade em Julia, explorando Estatísticas Descritivas, Amostragem e Estimação.\"\n",
        "categories:\n",
        "  - Primeiros Passos\n",
        "  - Variáveis Aleatórias\n",
        "author:\n",
        "  - name: Vitor Ribas Perrone\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/VitorRibasP\n",
        "    orcid: 0009-0009-6923-7712\n",
        "date: \"2025-07-09\"\n",
        "image: imagens/distribuicoesprobabilidade\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "\n",
        "::: justify\n",
        "Distribuições de probabilidade são a base para muitas análises estatísticas, pois descrevem como os dados podem variar e quais valores são mais ou menos prováveis de ocorrer. Entender e manipular essas distribuições é fundamental para realizar desde análises simples até modelos estatísticos mais avançados.\n",
        "\n",
        "Com Julia, trabalhar com distribuições torna-se algo rápido, intuitivo e flexível. Julia oferece uma variedade enorme de distribuições de diversos tipos, todas acessíveis por meio de uma sintaxe simples e direta. Além disso, é possível gerar amostras, calcular estatísticas importantes e visualizar comportamentos probabilísticos com facilidade.\n",
        "\n",
        "Neste post, vamos apresentar os conceitos básicos das distribuições de probabilidade em Julia e mostrar como criar, manipular e amostrar essas distribuições usando exemplos práticos.\n",
        ":::\n",
        "\n",
        "## Instalando e Carregando os Pacotes Necessários\n",
        "\n",
        "Em primeiro lugar, vamos instalar e carregar os pacotes que serão utilizados.\n",
        "\n",
        "\n",
        "```{julia}\n",
        "Pkg.add(\"Distributions\")\n",
        "using Distributions\n",
        "Pkg.add(\"Random\")\n",
        "using Random\n",
        "Pkg.add(\"StatsBase\")\n",
        "using StatsBase\n",
        "Pkg.add(\"StatsPlots\")\n",
        "using StatsPlots\n",
        "Pkg.add(\"Statistics\")\n",
        "using Statistics\n",
        "Pkg.add(\"DataFrames\")\n",
        "using DataFrames\n",
        "```\n",
        "\n",
        "\n",
        "## Determinação de Sementes\n",
        "\n",
        "::: justify\n",
        "Ao lidar com números pseudoaleatórios, garantir a reprodutibilidade dos resultados é fundamental. Para isso, fixamos uma semente antes de executar qualquer procedimento que envolva aleatoriedade. A função `Random.seed!` permite definir essa semente, assegurando que qualquer execução do código produza resultados idênticos.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "Random.seed!(123)\n",
        "```\n",
        "\n",
        "## Realização de Sorteios\n",
        "\n",
        "::: justify\n",
        "Antes de abordarmos as distribuições de probabilidade, vamos exemplificar como realizar sorteios simples a partir de um vetor. Essa funcionalidade é muito útil para gerar amostras com ou sem reposição. Inicialmente, criamos um vetor com quatro elementos.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "vetor = [\"A\", \"B\", \"C\", \"D\"]\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Dessa forma, para realizar um sorteio, basta utilizar a função `sample` e especificar o tamanho da amostra. Já para determinar se será com ou sem reposição, basta alterar o argumento `replace`.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "```{julia}\n",
        "sample(vetor, 2, replace = false)\n",
        "```\n",
        "\n",
        "```{julia}\n",
        "sample(vetor, 10, replace = true)\n",
        "```\n",
        "\n",
        "\n",
        "## Criação das Variáveis Aleatórias\n",
        "\n",
        "::: justify\n",
        "O pacote `Distributions` oferece uma ampla variedade de ferramentas para trabalhar com variáveis aleatórias de diferentes tipos. Ele permite criar objetos que representam distribuições de probabilidade, possibilitando a aplicação de diversas funções e operações diretamente sobre elas. A seguir, exploraremos algumas das distribuições disponíveis.\n",
        ":::\n",
        "\n",
        "### Contínuas\n",
        "Algumas das distribuições contínuas disponíveis pelo pacote são:\n",
        "\n",
        "```{julia}\n",
        "#Normal\n",
        "Normal(0,1)\n",
        "#Beta\n",
        "Beta(2,2)\n",
        "#Cauchy\n",
        "Cauchy(0,1)\n",
        "#Qui Quadrado\n",
        "Chisq(3)\n",
        "#Exponencial\n",
        "Exponential(2)\n",
        "#Gama\n",
        "Gamma(2,1)\n",
        "#T\n",
        "TDist(2)\n",
        "#Uniforme\n",
        "Uniform(0,1)\n",
        "#Weibull\n",
        "Weibull(2,3)\n",
        "```\n",
        "\n",
        "\n",
        "### Discretas\n",
        "Algumas das distribuições discretas disponíveis pelo pacote são:\n",
        "\n",
        "```{julia}\n",
        "#Bernoulli\n",
        "Bernoulli(0.8)\n",
        "#Binomial\n",
        "Binomial(10,0.5)\n",
        "#Uniforme Discreta\n",
        "DiscreteUniform(0,10)\n",
        "#Geométrica\n",
        "Geometric(0.7)\n",
        "#Hipergeométrica\n",
        "Hypergeometric(5, 10, 3)\n",
        "#Binomial Negativa\n",
        "NegativeBinomial(5, 0.5)\n",
        "#Poisson\n",
        "Poisson(5)\n",
        "```\n",
        "\n",
        "\n",
        "### Multivariadas\n",
        "Algumas das distribuições multivariadas disponíveis pelo pacote são:\n",
        "\n",
        "```{julia}\n",
        "#Multinomial\n",
        "Multinomial(10, [0.1, 0.2, 0.7])\n",
        "#Normal Multivariada\n",
        "MvNormal([0, 1], [1 0.6 ; 0.6 2])\n",
        "#Dirichlet\n",
        "Dirichlet([0.1, 0.2, 0.7])\n",
        "```\n",
        "\n",
        "\n",
        "### Truncadas\n",
        "::: justify\n",
        "Além das distribuições clássicas, o pacote permite o uso de distribuições truncadas, ou seja, com o suporte restringido a um intervalo específico. Para isso, utilizamos a função `truncated` com os limites desejados. \n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "#Normal Padrão Truncada\n",
        "truncated(Normal(0,1), -50, 50)\n",
        "#Poisson Truncada Inferiormente\n",
        "truncated(Poisson(3), lower = 2)\n",
        "#Exponencial Truncada Superiormente\n",
        "truncated(Exponential(5), upper = 50)\n",
        "```\n",
        "\n",
        "\n",
        "### Mistas\n",
        "::: justify\n",
        "Também é possível trabalhar com distribuições misturadas, que combinam componentes discretas e contínuas. Utilizamos a função `MixtureModel` para definir essas misturas. Para exemplificar seu funcionamento, vamos definir uma variável aleatória que segue uma Normal(-2,2) com probabilidade 0.25, uma Normal(0,1) com probabilidade 0.45 e uma Normal(3,5) com probabilidade 0.3.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "MixtureModel(Normal[\n",
        "   Normal(-2, 2),\n",
        "   Normal(0, 1),\n",
        "   Normal(3, 5)], [0.25, 0.45, 0.3])\n",
        "```\n",
        "\n",
        "\n",
        "### Estatísticas de Ordem\n",
        "::: justify\n",
        "O pacote permite ainda a definição de distribuições de estatísticas de ordem, que são distribuições associadas a valores ordenados da amostra, como mínimo, mediana e máximo.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "#Distribuição do Mínimo para Amostra de Tamanho 11 da Normal Padrão\n",
        "OrderStatistic(Normal(0,1), 11, 1)\n",
        "#Distribuição da Mediana para Amostra de Tamanho 11 da Normal Padrão\n",
        "OrderStatistic(Normal(0,1), 11, 6) \n",
        "#Distribuição do Máximo para Amostra de Tamanho 11 da Normal Padrão\n",
        "OrderStatistic(Normal(0,1), 11, 11)\n",
        "#Distribuição conjunta do Mínimo, Mediana e Máximo para Amostra de Tamanho 11 da Normal Padrão\n",
        "JointOrderStatistics(Normal(0,1), 11, (1, 6, 11))\n",
        "```\n",
        "\n",
        "\n",
        "## Manipulação e Amostragem\n",
        "::: justify\n",
        "Com isso, algumas das possibilidades de distribuição que podemos utilizar com o pacote `Distributions` já foram apresentadas, e para ver na íntegra o que é possível, basta acessar a [DOCUMENTAÇÃO](https://juliastats.org/Distributions.jl/stable/) do pacote. Para explorar as demais possibilidades do pacote, vamos utilizar a distribuição normal padrão.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "DistribuicaoNormal = Normal(0,1)\n",
        "```\n",
        "\n",
        "\n",
        "### Estatísticas Descritivas\n",
        "Algumas das estatísticas descritivas que podemos utilizar são:\n",
        "\n",
        "```{julia}\n",
        "#Media\n",
        "mean(DistribuicaoNormal)\n",
        "#Mediana\n",
        "median(DistribuicaoNormal)\n",
        "#Moda\n",
        "mode(DistribuicaoNormal)\n",
        "#Desvio Padrão\n",
        "std(DistribuicaoNormal)\n",
        "#Variância\n",
        "var(DistribuicaoNormal)\n",
        "#Quantil\n",
        "quantile(DistribuicaoNormal, 0.25)\n",
        "#Assimetria\n",
        "skewness(DistribuicaoNormal)\n",
        "#Curtose\n",
        "kurtosis(DistribuicaoNormal)\n",
        "#Entropia\n",
        "entropy(DistribuicaoNormal)\n",
        "#Mínimo\n",
        "minimum(DistribuicaoNormal)\n",
        "#Máximo\n",
        "maximum(DistribuicaoNormal)\n",
        "```\n",
        "\n",
        "\n",
        "### Funções da Distribuição\n",
        "Além disso, também podemos acessar funções vinculadas à distribuição, como:\n",
        "\n",
        "```{julia}\n",
        "#Densidade\n",
        "pdf(DistribuicaoNormal, 0)\n",
        "#LogDensidade\n",
        "logpdf(DistribuicaoNormal, 0)\n",
        "#Função de Distribuição Acumulada\n",
        "cdf(DistribuicaoNormal, 0)\n",
        "```\n",
        "\n",
        "\n",
        "### Amostragem\n",
        "::: justify\n",
        "Para gerar amostras da distribuição, utilizamos a função `rand`. Por exemplo, uma amostra de tamanho 4 da normal padrão:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "rand(DistribuicaoNormal, 4)\n",
        "```\n",
        "\n",
        "\n",
        "### Visualização\n",
        "A densidade da distribuição pode ser visualizada com a função `plot`:\n",
        "\n",
        "```{julia}\n",
        "plot(DistribuicaoNormal, title = \"Densidade da Distribuição Normal Padrão\", legend = false, size = (800, 500))\n",
        "```\n",
        "\n",
        "### Estimação por Máxima Verossimilhança\n",
        "::: justify\n",
        "Uma funcionalidade importante é a estimação de parâmetros via Máxima Verossimilhança a partir de amostras geradas. Por exemplo, considere amostras das distribuições Normal(2,5) e Binomial(25, 0.7).\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "amostra_normal = rand(Normal(2,5), 100)\n",
        "amostra_binomial = rand(Binomial(25, 0.7), 10)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Utilizamos a função `fit_mle` para estimar os parâmetros dessas distribuições a partir dos dados:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "fit_mle(Normal, amostra_normal)\n",
        "fit_mle(Binomial, 25, amostra_binomial)\n",
        "```\n",
        "\n",
        "\n",
        "## Comparando Amostras da Normal com a Própria Distribuição\n",
        "::: justify\n",
        "Para aplicar os conceitos vistos, vamos gerar amostras de tamanhos distintos da normal padrão e comparar suas estatísticas descritivas com as da distribuição teórica. Em primeiro lugar, vamos gerar as amostras.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "DistribuicaoNormal = Normal(0, 1)\n",
        "amostra10 = rand(DistribuicaoNormal, 10)\n",
        "amostra100 = rand(DistribuicaoNormal, 100)\n",
        "amostra1000 = rand(DistribuicaoNormal, 1000)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Em seguida, calculamos as estatísticas e organizamos os resultados em uma tabela para facilitar a comparação. A função `estatisticas` foi criada para computar as principais medidas e facilitar o processo:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "#Função para calcular estatísticas descritivas de um vetor\n",
        "function estatisticas(vetor)\n",
        "    return (\n",
        "        media = mean(vetor),\n",
        "        mediana = median(vetor),\n",
        "        desvio = std(vetor),\n",
        "        minimo = minimum(vetor),\n",
        "        maximo = maximum(vetor)\n",
        "    )\n",
        "end\n",
        "\n",
        "#Cálculo das estatísticas da distribuição teórica\n",
        "teoricas = (\n",
        "    media = mean(DistribuicaoNormal),\n",
        "    mediana = median(DistribuicaoNormal),\n",
        "    desvio = std(DistribuicaoNormal),\n",
        "    minimo = -Inf,\n",
        "    maximo = Inf\n",
        ")\n",
        "\n",
        "#Criação da tabela dos resultados\n",
        "DataFrame(\n",
        "    Estatística = [\"Média\", \"Mediana\", \"Desvio Padrão\", \"Mínimo\", \"Máximo\"],\n",
        "    Amostra10 = collect(estatisticas(amostra10)),\n",
        "    Amostra100 = collect(estatisticas(amostra100)),\n",
        "    Amostra1000 = collect(estatisticas(amostra1000)),\n",
        "    Distribuição = [teoricas.media, teoricas.mediana, teoricas.desvio, teoricas.minimo, teoricas.maximo]\n",
        ")\n",
        "```\n",
        "\n",
        "::: justify\n",
        "A partir da tabela criada, fica evidente que quanto maior o tamanho da amostra, mais próximas do valor teórico ficam as nossas estatísticas descritivas.\n",
        ":::\n",
        "## Conclusão\n",
        "\n",
        "::: justify\n",
        "Agora que você viu como criar, manipular e amostrar diversas distribuições de probabilidade em Julia, já pode aplicar esses conceitos em seus próprios projetos. Com a eficiência e simplicidade do Julia, fica muito mais fácil trabalhar com simulações, inferência estatística e até mesmo métodos avançados como Bootstrap e MCMC. Continue explorando, praticando e aproveitando tudo que Julia oferece para a estatística!\n",
        ":::\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::"
      ],
      "id": "96010f8d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}