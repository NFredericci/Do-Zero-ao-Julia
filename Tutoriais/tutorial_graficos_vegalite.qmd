---
title: "Gráficos com o pacote VegaLite.jl"
description: |
  Inspirado na biblioteca `Vega-Lite`, o pacote `VegaLite.jl` permite criar visualizações claras e modernas apenas descrevendo os elementos que devem aparecer. Neste tutorial, vamos apresentar os principais recursos do pacote por meio de exemplos práticos.
categories:
  - Gráficos
  - Pacotes
  - Ferramentas
author:
  - name: Esther Cleveston
    affiliation: "Universidade Estadual de Campinas"
    orcid: 0009-0008-6612-8417
  - name: Nicole Fredericci
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/NFredericci
date: "2025-10-22"
image: imagens/capa_vegalite.png
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
engine: knitr
draft: false
---

## Introdução

:::{.justify}
O `VegaLite.jl` é um pacote de visualização de dados da linguagem `Julia` que se destaca por sua praticidade e pelo estilo direto com que os gráficos são construídos. Inspirado na biblioteca `Vega-Lite`, ele permite criar visualizações claras e modernas apenas descrevendo os elementos que devem aparecer.

Neste tutorial, vamos apresentar os principais recursos do pacote por meio de exemplos práticos. Utilizaremos conjuntos de dados integrados do `VegaDatasets.jl` para explorar diferentes tipos de gráficos, personalização de cores, rótulos, escalas e títulos. O objetivo é mostrar como o `VegaLite.jl` pode ser uma ferramenta eficiente para análises visuais, tanto em projetos acadêmicos quanto profissionais.
:::

## Instalação

:::{.justify}
Para instalar os pacotes que serão utilizados, execute as seguintes linhas de código:
:::

```{julia}
Pkg.add(["VegaLite", "VegaDatasets"])

using VegaLite, VegaDatasets 
```

## Gráfico de Linhas

:::{.justify}
O gráfico de linhas do exemplo pode ser feito com o código abaixo. Utilizando o conjunto de dados _stocks_, criamos um gráfico de linhas em que o eixo x representa a data e o eixo y, o preço. Além disso, fizemos uma filtragem para considerar apenas os dados da ação _GOOG_ e usamos `:line` para definir a geometria do gráfico. Outras opções são `:bar` e `:point`, que serão utilizados nos próximos gráficos.
:::

```{julia}
#| results: hide

dataset("stocks") |>
@vlplot(
    :line,
    transform=[{filter="datum.symbol=='GOOG'"}],
    x={"date:t", title="Data"},
    y={"price:q", title="Preço"},
    color={value="green"},
    title="Gráfico de Linhas")
```

![](imagens/vegalite_grafico_linhas.png){fig-align="center" width="50%"}

:::{.justify}
Também é possível criar um gráfico de linhas com marcadores a partir do código abaixo. Usamos o mesmo conjunto de dados, porém, neste caso, o eixo x representa a data (em anos) e o eixo y, a média dos preços.
:::

```{julia}
#| results: hide

dataset("stocks") |>
@vlplot(
    transform=[{filter="datum.symbol==='GOOG'"}],
    mark={:line,point=true},
    x={"year(date):t", title="Data (ano)"},
    y={"mean(price):q", title="Média dos preços"},
    color=:symbol,
    title="Gráfico de Linhas com Marcadores")
```

![](imagens/vegalite_grafico_linhas_marcadores.png){fig-align="center" width="50%"}


## Gráfico de Pontos

:::{.justify}
Para fazer um gráfico de pontos (ou gráfico de dispersão), utilizamos o conjunto de dados _cars_, no qual o eixo x representa os Cavalos de Potência e o eixo y, as Milhas por Galão.
:::

```{julia}
#| results: hide

dataset("cars") |>
@vlplot(
        :point, 
        x={"Horsepower:q", title="Cavalos de Potência"},
        y={"Miles_per_Gallon:q", title="Milhas por Galão"},
        color={value="green"},
        title="Gráfico de Pontos")
```

![](imagens/vegalite_grafico_pontos.png){fig-align="center" width="50%"}

:::{.justify}
Ainda com o mesmo conjunto de dados e utilizando os mesmos valores nos eixos x e y, podemos codificar a cor e a forma dos pontos de acordo com a variável categórica `Origin` (origem geográfica do dado).
:::

```{julia}
#| results: hide

dataset("cars") |>
@vlplot(
        :point, 
        x={"Horsepower:q", title="Cavalos de Potência"},
        y={"Miles_per_Gallon:q", title="Milhas por Galão"},
        color=:Origin, 
        shape=:Origin,
        title="Gráfico de Pontos 2")
```

![](imagens/vegalite_grafico_pontos2.png){fig-align="center" width="50%"}


## Gráfico de Barras

:::{.justify}
Podemos fazer um gráfico de barras a partir do código abaixo. Neste caso, utilizamos o conjunto de dados _population_, no qual o eixo x representa a população (quantidade de pessoas) e o eixo y, a idade. Aplicamos também uma filtragem nos dados, selecionando apenas os registros do ano 2000.

No `VegaLite`, se a variável categórica está no eixo x, o gráfico fica na vertical; e se está no eixo y, o gráfico fica na horizonal.
:::

```{julia}
#| results: hide

dataset("population") |>
@vlplot(
    height={step=17},
    :bar,
    transform=[{filter="datum.year == 2000"}],
    x={"sum(people)", axis={title="população"}},
    y={"age:o", axis={title="Idade"}},
    title="Gráfico de Barras",
    color={value="lightblue"})
```

![](imagens/vegalite_grafico_barras.png){fig-align="center" width="50%"}

:::{.justify}
No próximo exemplo, movemos a variável categorica do eixo y para o eixo x a fim de inverter a orientação do gráfico anterior para vertical.
:::

```{julia}
#| results: hide

dataset("population") |>
@vlplot(
    height={step=17},
    :bar,
    transform=[{filter="datum.year == 2000"}],
    x={"age:o", axis={title="Idade"}},
    y={"sum(people)", axis={title="população"}},
    title="Gráfico de Barras",
    color={value="lightblue"})
```

![](imagens/vegalite_grafico_barras2.png){fig-align="center" width="50%"}

:::{.justify}
Para fazer o gráfico de barras empilhadas, utilizamos o conjunto de dados _seattle-weather_, que contém informações sobre o tempo na cidade de Seattle, EUA. Colocamos no eixo x o mês do ano e no eixo y, a contagem de ocorrências. O empilhamento é obtido codificando a cor de cada barra de acordo com o tipo de clima (sol, neblina, garoa, chuva e neve). Por fim, personalizamos a legenda do gráfico, alterando os nomes dos rótulos para português.
:::

```{julia}
#| results: hide

dataset("seattle-weather") |>
@vlplot(
    :bar,
    x={"month(date):o", axis={title="Mês do Ano"}},
    y="count()",
    color={:weather, scale={domain=["sun","fog","drizzle","rain","snow"],
                            range=["#e7ba52","#c7c7c7","#aec7e8","#1f77b4","#9467bd"]},
                     legend={title="Tipo de Clima",
                             labelExpr="datum.label == 'sun' ? 'Sol' :
                                        datum.label == 'fog' ? 'Neblina' :
                                        datum.label == 'drizzle' ? 'Garoa' :
                                        datum.label == 'rain' ? 'Chuva' :
                                        datum.label == 'snow' ? 'Neve' :
                                        datum.label"}},
            title="Grafico de Barras Empilhadas")
```

![](imagens/vegalite_grafico_barras_empilhadas.png){fig-align="center" width="50%"}

## Gráfico de Densidade

:::{.justify}
Para a construção do gráfico de densidade, utilizamos o conjunto de dados _movie_, que contém as notas de filmes do _IMDB_. As notas, cuja escala vai de $1$ até $10$, estão representadas pelo eixo x, e o eixo y representa a densidade. A geometria utilizada é a de área (`:area`), que plota os valores de densidade gerados pela transformação (`transform`).
:::

```{julia}
#| results: hide

dataset("movies") |>
@vlplot(
    width=400,
    height=100,
    :area,
    transform=[{density="IMDB_Rating",bandwidth=0.3}],
    x={"value:q", title="IMDB Nota"},
    y="density:q",
    color={value="lightblue"},
    title="Gráfico de Densidade")
```

![](imagens/vegalite_grafico_densidade.png){fig-align="center" width="50%"}

## Gráfico Histograma

:::{.justify}
Podemos fazer um histograma com o código abaixo. Primeiro, carregamos o pacote `DataFrame` para podermos criar um conjunto de dados personalizado. Esses dados representam os _bins_ (intervalos) e suas respectivas frequências (contagem de valores), simulando o resultado de um pré-processamento. Após isso, criamos o gráfico no qual o eixo x representa os intervalos e o eixo y, a frequência em cada intervalo.
:::

```{julia}
Pkg.add("DataFrames")
using DataFrames

dados_histograma = DataFrame(
    comeco=[8,10,12,14,16,18,20,22],
    fim=[10,12,14,16,18,20,22,24],
    contagem=[7,29,71,127,94,54,17,5])
```
```{julia}
#| results: hide

dados_histograma |> @vlplot(
    :bar,
    x={:comeco, bin={binned=true,step=2}},
    x2=:fim,
    y=:contagem,
    color={value="lightblue"},
    title="Histograma")
```


![](imagens/vegalite_histograma.png){fig-align="center" width="50%"}

## Gráfico de Setores

:::{.justify}
No próximo exemplo, criamos um _DataFrame_ com as categorias de $1$ até $6$ e inserimos seus respectivos valores. Após isso, criamos o gráfico de setores (ou o famoso gráfico de pizza), no qual o tamanho do arco é caracterizado pela variável `value` e a cor, pela variável categórica `category`.
:::

```{julia}
df = DataFrame(category=1:6, value=[4,6,10,3,7,8])
```

```{julia}
#| results: hide

df |> @vlplot(
        :arc, 
        theta=:value, 
        color={"category:n", title="Categoria"}, 
        view={stroke=nothing},
        title="Gráfico de Setores")
```


![](imagens/vegalite_grafico_setores.png){fig-align="center" width="50%"}

## Gráfico de Rosca

:::{.justify}
Para a criação do gráfico de rosca (_Donut Chart_), utilizamos o mesmo _DataFrame_ criado no exemplo anterior. A diferença entre os dois tipos de gráfico está no preenchimento, sendo que os gráficos de setores são preenchidos no centro, e os de rosca não. A ausência de preenchimento é obtida configurando `mark` com o parâmetro `innerRadius` (raio interno) em um valor diferente de zero.
:::

```{julia}
#| results: hide

df |> @vlplot(
        mark={:arc, innerRadius=50}, 
        theta=:value, 
        color={"category:n", title="Categoria"}, 
        view={stroke=nothing},
        title="Gráfico de Rosca")
```

![](imagens/vegalite_grafico_rosca.png){fig-align="center" width="50%"}

## Conclusão

:::{.justify}
Mesmo com uma sintaxe simples, o pacote `VegaLite.jl` permite construir desde gráficos estatísticos básicos até visualizações interativas mais complexas, com recursos como filtros, agregações e personalizações visuais. 

Neste tutorial, vimos apenas uma parte das possibilidades que o pacote oferece. Exploramos exemplos fundamentais como gráficos de barras, dispersão e linhas, além de mostrar como personalizar cores, eixos e títulos para refinar a apresentação dos dados. 
:::

## Referências 

:::{.justify}
Este tutorial foi inspirado na [documentação oficial](https://www.queryverse.org/VegaLite.jl/stable/) do pacote, que pode ser consultada para mais informações.
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica, aprimoramento do texto e criação de imagens.
:::
