---
title: "Um pouco de SQLite em Julia"
description: |
  Como trabalhar com o SQLite no Julia
categories:
  - Tutorial
author:
  - name: Gabriel Campovilla
      affiliation: "Universidade Estadual de Campinas"
  - name: Esther Cleveston
    affiliation: "Universidade Estadual de Campinas"
    orcid: 0009-0008-6612-8417
date: "2025-07-31"
image: imagens/sqlite_imagem.jpg
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
draft: false
---

# Blog de Leitura: Trabalhando com SQLite em Julia

## Introdução a SQLite

::: justify
SQLite é um mecanismo de banco de dados SQL embutido em um processo, conhecido por sua simplicidade e eficiência. Ele é autônomo, não requer servidor e tem configuração zero, sendo ideal para aplicações que precisam de um banco de dados leve e portátil. O SQLite é de domínio público e amplamente utilizado em diversas aplicações.
:::

## Principais Características

::: justify
-   **Portabilidade**: O banco de dados é armazenado em um único arquivo no disco, compatível com qualquer plataforma;
-   **Leveza**: A biblioteca tem aproximadamente 600KB;
-   **Versatilidade**: Suporta múltiplas tabelas, índices, gatilhos e visões.
:::

::: justify
Utilizaremos o RStudio, para isso, precisamos instalar o pacote do Julia.
:::

```{r}
install.packages("JuliaCall")
library(JuliaCall)
```

```{r}
Sys.setenv(JULIA_HOME = "")
julia_setup()
```

::: justify
Caso tenha alguma dúvida neste processo, veja este Blog: <https://ime.unicamp.br/julialang/Blog/julia_rstudio.html>
:::

## Acessando SQLite em Julia

::: justify
Em Julia, podemos interagir com o SQLite usando o pacote **SQLite.jl**. Abaixo está um exemplo básico de como se conectar a um banco de dados e executar consultas:
:::

```{r}
using Pkg  # Carrega o pacote Pkg, responsável por gerenciar pacotes em Julia.

Pkg.add("SQLite")  # Instala o pacote SQLite.
Pkg.add("DataFrames")  # Instala o pacote DataFrames.
Pkg.add("CSV")  # Instala o pacote CSV.

using SQLite, CSV, DataFrames  # Carrega os pacotes SQLite, CSV e DataFrames para uso no código.

```

## Operações Básicas

::: justify
Conectando ao banco
:::

```{r}
bd = "meu_banco.sqlite" # Este vai ser seu caminho para o banco de dados

db = SQLite.DB(bd) # Conecta ao banco de dados desejado, mas caso necessário cria se não existir

```

::: justify
Importando o mtcars (exportado previamente do R como CSV)
:::

```{r}
write.csv(mtcars, "mtcars.csv", row.names = FALSE) # Por mais que estamos usando o R, ainda é possível utilizar os bancos de dados que o mesmo possui, assim usaremos o mtcars

```

```{r}
mtcars_df = CSV.read("mtcars.csv", DataFrame) # Aqui carregamos os dados do CSV em um DataFrame

SQLite.load!(mtcars_df, db, "mtcars") #Agora estamos carregando os dados no banco SQLite na tabela "mtcars"

println(SQLite.tables(db)) # Verificamos as tabelas disponíveis

```

### Consultas

::: justify
Podemos usar o comando `SELECT` para recuperar dados, com opções como `WHERE`, `ORDER BY`, e `GROUP BY` para filtrar e organizar os resultados.
:::

```{r}
# Consulta: selecionar carros com "mpg" maior que 20 e ordenar por "hp"
query = """
SELECT mpg, cyl, hp, gear
FROM mtcars
WHERE mpg > 20
ORDER BY hp DESC
"""
result = DataFrame(SQLite.Query(db, query))
println(result)


```

::: justify
Inserção e Criação de Nova Tabela (exemplo simples)
:::

```{r}
# Criando uma nova tabela chamada "carros"
SQLite.execute(db, """
CREATE TABLE IF NOT EXISTS carros (
    modelo TEXT,
    potencia INTEGER,
    cambio INTEGER
)
""")

# Inserimos alguns dados que queremos 
SQLite.execute(db, """
INSERT INTO carros VALUES
('CarroX', 180, 5),
('CarroY', 120, 4)
""")

```

::: justify
Atualização e Remoção
:::

```{r}
# Atualizando registro
SQLite.execute(db, """
UPDATE carros
SET potencia = 200
WHERE modelo = 'CarroX'
""")

# Removendo tabela
SQLite.execute(db, "DROP TABLE IF EXISTS carros")

```

## Boas Práticas

::: justify
1.  **Segurança**: Evite concatenar strings diretamente em consultas SQL para prevenir injeção de SQL. Use parâmetros seguros;
2.  **Conexões**: Sempre feche a conexão com o banco de dados após o uso para liberar recursos;
3.  **Backup**: Faça cópias regulares do arquivo do banco de dados para evitar perda de informações.
:::

## Conclusão

::: justify
SQLite é uma ferramenta poderosa e versátil para armazenar e manipular dados em aplicações Julia. Sua simplicidade e portabilidade o tornam ideal para projetos de pequena e média escala. Com o pacote `SQLite.jl`, é fácil integrar bancos de dados SQLite em seus fluxos de trabalho em Julia, permitindo consultas eficientes e manipulação segura de dados.
:::

::: justify
Experimente SQLite em seus próximos projetos e aproveite os benefícios de um banco de dados leve e eficiente!
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica, aprimoramento do texto e criação de imagens.
:::
