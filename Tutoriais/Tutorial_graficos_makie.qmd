---
title: "Tutorial de como contruir gráficos com o Pacote Makie.jl"
description: |
  Tutorial de criação de gráficos simples e avançados com o pacote Makie.jl
categories:
  - Gráficos
author:
  - name: Esther Cleveston
    affiliation: "Universidade Estadual de Campinas"
    orcid: 0009-0008-6612-8417
date: "2025-07-23"
image: imagens/pacote_makie_capa.png ALTERARRR
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
draft: true
---

## Introdução

::: justify
O Makie.jl é um pacote de gráficos da linguagem Julia que se destaca pela sua flexibilidade e pela grande variedade de funcionalidades. Com ele, é possível criar desde visualizações bem simples, como gráficos de barras e linhas, até gráficos mais avançados, como visualizações em 3D e animações. O pacote oferece diferentes backends, como o CairoMakie e o GLMakie, que permitem gerar tanto gráficos estáticos quanto gráficos interativos.

Neste tutorial, vamos mostrar alguns exemplos que ajudam a entender como o Makie funciona, explorando algumas visualizações básicas, como histogramas e gráficos de dispersão, e também um exemplo mais avançado como gráfico de linhas em 3D.
:::

## Instalar os pacotes

::: justify
Para instalar os pacotes que serão utilizados, execute as seguintes linhas de código:
:::

```{julia, eval = FALSE}
pkg.add("Makie") 
using Makie 
pkg.add("CairoMakie") 
using CairoMakie
pkg.add("GLMakie")
using GLMakie
```

## Gráfico de Dispersão

::: justify
Podemos fazer um scatterplot (Gráfico de Dispersão) com o código abaixo. Neste caso, para o eixo X utilizamos valores de 1 até 10 e para o eixo Y geramos aleatoriamente 10 números entre 0 e 1.
:::

```{julia, eval = FALSE}
x = 1:10 
y = rand(10)

fig = scatter(x, y,
    color = :green,
    markersize = 15,
    label = "Dados Aleatórios",
    axis = (
        title = "Gráfico de Dispersão",
        xlabel = "Eixo X",
        ylabel = "Eixo Y"
    )
)
fig
save("makie_dispersao.png", fig)
```
::: justify
A função save será utilizada em todos os gráficos deste tutorial, mas apenas mostraremos ela neste código.
:::

![](imagens/makie_dispersao.png){fig-align="center" width="50%"}

## Gráfico de Barras

::: justify
Iremos fazer gráfico de barras lado a lado, empilhadas e empilhadas lado a lado. 
Para o primeiro caso, iremos utilizar o código abaixo. Primeiro criamos uma tabela com as categorias gato indo de 1 até 3, a altura será gerada de 0.1 até 0.9 com incremento de 0.1 e, por fim, a categoria grupo contendo 3 tipos.
:::

```{julia, eval = FALSE}
tabela = (gato = [1, 1, 1, 2, 2, 2, 3, 3, 3],
       altura = 0.1:0.1:0.9,
       grupo = [1, 2, 3, 1, 2, 3, 1, 2, 3]
       )
barplot(tabela.gato, tabela.altura,
        dodge = tabela.grupo,
        color = tabela.grupo,
        axis = (xticks = (1:3, ["Esquerda", "Meio", "Direita"]),
                title = "Barras Lado a Lado"),
        )
```

![](imagens/makie_barras_lado_a_lado.png){fig-align="center" width="50%"}

::: justify
Para fazermos o gráfico das barras empilhadas iremos utilizar a mesma tabela feita anteriormente e mudaremos o argumento dodge para stack.
:::

```{julia, eval = FALSE}
tabela = (gato = [1, 1, 1, 2, 2, 2, 3, 3, 3],
       altura = 0.1:0.1:0.9,
       grupo = [1, 2, 3, 1, 2, 3, 1, 2, 3]
       )
barplot(tabela.gato, tabela.altura,
        stack = tabela.grupo,
        color = tabela.grupo,
        axis = (xticks = (1:3, ["Esquerda", "Meio", "Direita"]),
                title = "Barras Empilhadas"),
        )
```

![](imagens/makie_barras_empilhadas.png){fig-align="center" width="50%"}

::: justify
Por fim, iremos fazer uma combinação dos dois últimos gráficos. Para isso, vamos adicionar na tabela duas categorias extras, grupo1 e grupo2, os quais serão utilizados respectivamente nos argumentos dodge e stack.
:::

```{julia, eval = FALSE}
tabela = (gato = [1, 1, 1, 2, 2, 2, 3, 3, 3],
       altura = 0.1:0.1:0.9,
       grupo = [1, 2, 3, 1, 2, 3, 1, 2, 3],
       grupo1 = [1, 2, 2, 1, 1, 2, 1, 1, 2],
       grupo2 = [1, 1, 2, 1, 2, 1, 1, 2, 1]
       )

barplot(tabela.gato, tabela.altura,
        dodge = tabela.grupo1,
        stack = tabela.grupo2,
        color = tabela.grupo,
        axis = (xticks = (1:3, ["Esquerda", "Meio", "Direita"]),
                title = "Lado a lado e Empilhadas"),
        )
```

![](imagens/makie_barras_lado_empilhadas.png){fig-align="center" width="50%"}

## Gráfico BoxPlot

::: justify
Para a construção do BoxPlot utilizamos o código abaixo. Para o eixo X iremos gerar 1000 valores aleatórios entre 1 e 3 e para o eixo Y iremos gerar 1000 valores aleatórios de uma distribuição normal padrão.
:::

```{julia, eval = FALSE}
x = rand(1:3, 1000)
y = randn(1000)

boxplot(x, y,
    color = :green,
    markersize = 15,
    label = "Dados Aleatórios",
    axis = (
        title = "BoxPlot",
        xlabel = "Eixo X",
        ylabel = "Eixo Y"))
```

![](imagens/makie_boxplot.png){fig-align="center" width="50%"}

## Gráfico de Densidade

::: justify
Para a construção do Gráfico de Densidade iremos gerar uma curva de densidade de 300 valores aleatórios da normal padrão e atribuir a variável densidade, após isso o ! é utilizado para adicionar a densidade a um gráfico já existente. Por meio dele iremos gerar 300 valores aleatórios e deslocar para a direita, somando 2. O alpha irá definir a transparência da curva.
:::

```{julia, eval = FALSE}
densidade = density(randn(300))
density!(randn(300) .+ 3, alpha = 0.8)

densidade
```

![](imagens/makie_densidade.png){fig-align="center" width="50%"}

## Gráfico Histograma

::: justify
Podemos fazer um Histograma com o código abaixo. Primeiro geramos 1000 amostras aleatórias de uma normal padrão e depois geramos o histograma com 30 colunas.
:::

```{julia, eval = FALSE}
dados = randn(1000)
hist(dados, bins = 30, color = :green)
```

![](imagens/makie_histograma.png){fig-align="center" width="50%"}

## Gráfico de Linhas

::: justify
O Gráfico de Linhas pode ser feito com o código abaixo. Para o eixo X utilizamos valores de 1 até 10 e para o Eixo Y utilizamos uma lista de valores aleatórios.
:::

```{julia, eval = FALSE}
x = 1:10
y = [2, 4, 3, 6, 7, 8, 7, 9, 10, 12]

lines(x, y,
    color = :green,
    label = "Dados Aleatórios",
    axis = (
        title = "Gráfico de Linhas",
        xlabel = "Eixo X",
        ylabel = "Eixo Y"))
```

![](imagens/makie_linhas.png){fig-align="center" width="50%"}

## Mais gráficos

::: justify
Iremos explorar alguns gráficos possíveis de serem feitos com o GLMakie e com o CairoMakie. Para o primeiro exemplo iremos carregar também o pacote DelimitedFiles e iremos acessar a elevação de um terreno, após isso iremos criar o espaço para a figura utilizando Figure() e Axis(). Com a função contourf iremos criar o contorno 10 faixas de valores (altitudes), assim teremos um Gráfico de Contorno.
:::

```{julia, eval = FALSE}
pkg.add("DelimitedFiles")
using DelimitedFiles

vulcao = readdlm(Makie.assetpath("volcano.csv"), ',', Float64)

f = Figure()
Axis(f[1, 1])
contorno = contourf!(vulcao, levels = 10)
Colorbar(f[1, 2], contorno)

f
```

![](imagens/makie_grafico_contorno.png){fig-align="center" width="50%"}

::: justify
No segundo exemplo iremos construir um Mapa de Calor (Heatmap), para isso definimos os valores do eixo X indo de 1 até 5 e do eixo Y indo de 6 até 10 e depois uma matriz 5x5 com os números indo de 1 até 25 (essa matriz será usada com os valores do heatmap para definir as cores).
:::

```{julia, eval = FALSE}
figura = Figure()
ax = Axis(figura[1, 1])

centro_x = 1:5
centro_y = 6:10
dados = reshape(1:25, 5, 5)

heatmap!(ax, centro_x, centro_y, dados)

figura
```

![](imagens/makie_heatmap.png){fig-align="center" width="50%"}

::: justify
Por fim, no último exemplo iremos fazer um Gráfico de Linhas 3D. Primeiro criamos 100 pontos aleatórios em um espaço 3D e depois geramos outros 100 valores aleatórios. Criamos uma figura e depois desenhamos as linhas conectando os pontos e as cores serão definidas pela variável valores. Por fim, o fxaa = true irá suavizar as linhas.
:::

```{julia, eval = FALSE}
pontos = rand(Point3f, 100)
valores = rand(100)

figura = Figure(size = (600, 650))
Label(figura[1, 1], "base", tellwidth = false)
lines(figura[2, 1], pontos, color = valores, fxaa = true)

figura
```

![](imagens/makie_3D.png){fig-align="center" width="50%"}

## Conclusão

::: justify
O pacote Makie.jl, juntamente com seus backends CairoMakie e GLMakie, oferece uma ampla gama de recursos para a criação de gráficos, indo desde os mais simples até visualizações interativas e 3D. Suas funcionalidades são tantas que seria impossível abordar todas em um único tutorial. Neste material, exploramos apenas algumas delas, com exemplos que vão de gráficos básicos, como barras, histogramas e linhas, até representações mais avançadas, como mapas de calor e gráficos de linhas em 3D.
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica, aprimoramento do texto e criação de imagens.
:::

## Referências utilizadas para a construção do tutorial:

::: justify
Danisch & Krumbiegel, (2021). Makie.jl: Flexible high-performance data visualization for Julia. Journal of Open Source Software, 6(65), 3349, https://doi.org/10.21105/joss.03349
:::
