---
title: "Um pouco mais sobre SQLite em Julia"
description: O texto é um tutorial prático que ensina a usar o SQLite com a linguagem Julia dentro do RStudio. Ele mostra desde a instalação dos pacotes até a execução de consultas SQL para manipular e analisar dados, usando o dataset iris como exemplo
 
categories:
  - SQLite
  -   Manipulação de dados
author:
  - name: Gabriel Campovilla da Silva
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/C4mpovill4

  - name: 
    affiliation: 
    url: 
    orcid: 

date: "2025-07-30"
image: imagens/loops_condic.png
lang: "pt"
format:
  html:
    toc: true
    self-contained: false
draft: false
engine: knitrNet
---

# QLite: Uma Solução de Banco de Dados Leve e Versátil

O SQLite se apresenta como uma biblioteca singular no universo dos sistemas de gerenciamento de bancos de dados. Ao contrário de soluções tradicionais que exigem um servidor dedicado e configuração complexa, o SQLite incorpora-se diretamente ao processo da aplicação, oferecendo um mecanismo de banco de dados SQL autônomo, sem servidor e com configuração nula. Essa característica fundamental o torna uma opção extremamente atraente para uma vasta gama de aplicações, desde dispositivos móveis até sistemas embarcados e aplicações desktop.

A natureza "sem servidor" do SQLite elimina a necessidade de um processo de servidor separado para gerenciar o banco de dados. Em vez disso, a biblioteca interage diretamente com arquivos comuns no disco, onde reside toda a estrutura do banco de dados, incluindo tabelas, índices, gatilhos e visões. Essa abordagem simplificada não apenas facilita a implantação e o gerenciamento, mas também contribui para um menor consumo de recursos, tornando o SQLite ideal para ambientes com limitações de hardware.

Ademais, a licença de domínio público do SQLite garante sua utilização gratuita para qualquer propósito, seja ele comercial ou privado. Essa liberdade de uso, aliada à sua portabilidade, o arquivo de banco de dados funciona em qualquer plataforma e ao seu tamanho compacto de aproximadamente 600KB, reforça sua versatilidade e ampla aplicabilidade. A designação LTS (Long-Term Support) assegura a estabilidade e a continuidade do suporte, conferindo confiança aos desenvolvedores que optam por integrar o SQLite em seus projetos.

Em suma, o SQLite representa uma solução de banco de dados SQL robusta e eficiente, quebrando paradigmas ao oferecer uma alternativa leve, autônoma e de fácil utilização. Sua capacidade de operar diretamente em arquivos, sua portabilidade e sua licença permissiva o posicionam como uma ferramenta valiosa para desenvolvedores que buscam integrar funcionalidades de banco de dados em suas aplicações sem a complexidade e a sobrecarga de Sistema de Gerenciamento de Banco de Dados tradicionais.

SQLite é um mecanismo de banco de dados SQL embutido em um processo, conhecido por sua simplicidade e eficiência. Ele é autônomo, não requer servidor e tem configuração zero, sendo ideal para aplicações que precisam de um banco de dados leve e portátil. SQLite é de domínio público e amplamente utilizado em diversas aplicações, desde sistemas embarcados até grandes plataformas como Android e Windows.

Como utilizarei o RStudio, precisamos instalar o pacote do Julia.

```{Julia}
install.packages("JuliaCall")
library(JuliaCall)
```

```{Julia}
Sys.setenv(JULIA_HOME = "")
julia_setup()
```

Caso tenha alguma dúvida neste processo, temos um Blog no qual ajuda neste processo: <https://ime.unicamp.br/julialang/Blog/julia_rstudio.html>

# Usando Julia como Interface para SQLite

Julia possui um pacote chamado SQLite.jl; SQLite.jl oferece todos os recursos do SQLite diretamente dentro do Julia. Apesar de, neste caso, estarmos dentro do Julia, os comandos são passados diretamente para o motor do SQLite, que é instalado automaticamente quando o pacote SQLite.jl é adicionado ao ambiente.

```{Julia}
using Pkg  # Carrega o pacote Pkg, responsável por gerenciar pacotes em Julia.

Pkg.add("SQLite")  # Instala o pacote SQLite.
Pkg.add("DataFrames")  # Instala o pacote DataFrames.
Pkg.add("CSV")  # Instala o pacote CSV.

using SQLite, CSV, DataFrames  # Carrega os pacotes SQLite, CSV e DataFrames para uso no código.

```

## Algumas Operações Básicas

Vamos agora utilizar o famoso conjunto de dados `iris` do R, mas com consultas SQL dentro do Julia

### Etapa 1: Exportar `iris` do R para CSV

```{Julia}
write.csv(iris, "iris.csv", row.names = FALSE)

```

Importar esse CSV no banco SQLite via Julia e visualizar suas tabelas e colunas

```{Julia}
using SQLite, CSV, DataFrames

# Conectar ao banco de dados SQLite
db = SQLite.DB("meu_banco.sqlite")

# Carregar o arquivo iris.csv no DataFrame do Julia
iris_df = CSV.read("iris.csv", DataFrame)

# Salvar os dados no banco SQLite na tabela "iris"
SQLite.load!(iris_df, db, "iris")

# Verificar quais tabelas existem no banco
println("Tabelas no banco:")
println(SQLite.tables(db))

# Visualizar as colunas da tabela iris
query = "SELECT * FROM iris LIMIT 0;"  # Apenas o cabeçalho
colunas = DataFrame(SQLite.Query(db, query))
println("Colunas da tabela 'iris':")
println(names(colunas))

```

Explicando o código acima: Nesta etapa, utilizamos Julia para carregar o conjunto de dados iris, originalmente salvo como um arquivo CSV exportado do R, e importá-lo para um banco de dados SQLite, de forma que possamos fazer consultas SQL sobre ele.

Primeiro, carregamos os pacotes SQLite, CSV e DataFrames, que permitem manipular arquivos CSV, criar e interagir com bancos de dados SQLite, e trabalhar com os dados como tabelas em Julia. Em seguida, conectamos (ou criamos) um banco de dados chamado meu_banco.sqlite, que será armazenado como um arquivo local no disco. Após isso, lemos o arquivo iris.csv e o carregamos em um DataFrame — uma estrutura tabular usada em Julia para representar dados como em uma planilha.

Com os dados já carregados em memória, usamos o comando SQLite.load! para criar uma nova tabela chamada iris dentro do banco SQLite e inserir todos os dados do DataFrame nela. Por fim, usamos SQLite.tables(db) para listar todas as tabelas presentes no banco e confirmar que a importação foi bem-sucedida.

Essa etapa transforma os dados do R em uma base SQL pronta para consultas, combinando o poder do SQLite com a flexibilidade da linguagem Julia.

# Manipulação Básica: Selecionando Registros

-   O comando dbGetQuery consulta o banco de dados, extrai os resultados solicitado e os retorna ao Julia;
-   A sintaxe é dbGetQuery(conexao, chamada SQL);
-   Extraia da tabela albums todas as colunas e todas as linhas e armazene-os em um objeto chamado album_db:

```{Julia}
# Consulta SQL para selecionar todas as colunas e linhas da tabela 'iris'
query = "SELECT * FROM iris"

# Executa a consulta e armazena o resultado no objeto iris_db como um DataFrame
iris_db = DataFrame(SQLite.Query(db, query))

# Visualiza o conteúdo (opcional)
println(iris_db)

```

Explicando o código acima: Para extrair todos os dados da tabela iris no SQLite usando Julia, utilizamos uma consulta SQL com o comando SELECT \* FROM iris. Em seguida, usamos SQLite.Query para executar essa consulta no banco e DataFrame(...) para converter o resultado em um objeto chamado iris_db, que armazena os dados como uma tabela em Julia, pronta para análise. Essa operação é equivalente ao uso de dbGetQuery no R.

# O Comando SELECT O comando SELECT é o mais utilizado em SQL e pode ser combinado com vários argumentos:

-   ORDER BY: ordenar resultados

-   DISTINCT: valores únicos

-   WHERE: filtrar linhas

-   LIMIT: limitar número de resultados

-   JOIN: consultar múltiplas tabelas

-   GROUP BY: agrupar resultados

-   HAVING: filtrar grupos

    ## ORDER BY: ordenar os resultados

```{Julia}
  query = """
SELECT *
FROM iris
ORDER BY SepalLength DESC
"""
resultado = DataFrame(SQLite.Query(db, query))
println(resultado)

```

Ordena os dados da tabela iris do maior para o menor valor de SepalLength.

## DISTINCT: valores únicos

```{Julia}
query = """
SELECT DISTINCT Species
FROM iris
"""
resultado = DataFrame(SQLite.Query(db, query))
println(resultado)

```

Retorna as espécies únicas presentes no conjunto iris.

## WHERE: filtrar linhas

```{Julia}
query = """
SELECT *
FROM iris
WHERE Species = 'setosa'
"""
resultado = DataFrame(SQLite.Query(db, query))
println(resultado)

```

Filtra apenas as linhas onde a espécie é setosa.

## LIMIT: limitar o número de resultados

```{Julia}
query = """
SELECT *
FROM iris
LIMIT 10
"""
resultado = DataFrame(SQLite.Query(db, query))
println(resultado)

```

Mostra apenas as 10 primeiras linhas da tabela.

## GROUP BY e HAVING: agrupar e filtrar grupos

```{Julia}
query = """
SELECT Species, AVG(SepalLength) as MediaSepal
FROM iris
GROUP BY Species
HAVING MediaSepal > 5.5
"""
resultado = DataFrame(SQLite.Query(db, query))
println(resultado)

```

Agrupa por espécie, calcula a média de SepalLength e exibe apenas as espécies com média acima de 5.5.

## JOIN: Unir tabelas

Como estamos trabalhando apenas com a tabela iris, o exemplo de JOIN não se aplica diretamente aqui. Mas, se você tiver outra tabela relacionada (por exemplo, uma com informações adicionais por espécie), posso te ajudar a montar esse exemplo também.

# Funçõesde Agregação

## AVG

AVG(\[ALL \| DISTINCT\] expressao) calcula a média de todos os valores não-nulos ou dos valores distintos;

## COUNT

COUNT(\[ALL \| DISTINCT\] expressao) realiza a contagem de todos registros;

## MAX, MIN, SUM

funcionam de maneira análoga às funções anteriores;

# Boas Práticas:

Segurança em Consultas SQL Ao trabalhar com bancos de dados SQL, uma das principais preocupações é garantir que as consultas sejam executadas com segurança, evitando falhas e, principalmente, vulnerabilidades como injeção de SQL.

No R, o pacote RSQLite oferece funções como dbSendQuery() e dbBind(), que permitem preparar uma consulta com parâmetros e depois passar os valores separadamente. Essa abordagem é mais segura do que interpolar valores diretamente nas strings SQL.

Embora estejamos utilizando Julia, o conceito permanece o mesmo: evite construir consultas SQL com concatenação de strings contendo dados do usuário. Em vez disso, utilize consultas parametrizadas sempre que possível (embora SQLite.jl ainda tenha limitações nesse suporte de forma nativa, é possível contornar com cuidado).

O que não fazer

```{Julia}
# NÃO FAÇA: Inserindo valor diretamente na string SQL
nome_especie = "setosa"
query = "SELECT * FROM iris WHERE Species = '$nome_especie'"

```

Isso pode parecer inofensivo, mas abre espaço para manipulação maliciosa se o valor de entrada não for controlado.

o que fazer de boa prática alternativa (em R com RSQLite):

```{Julia}
# Em R, utilizando dbBind para evitar injeção
stmt <- dbSendQuery(conexao, "SELECT * FROM iris WHERE Species = ?")
dbBind(stmt, list("setosa"))

```

Quando você executa uma consulta SQL, a forma como os dados são inseridos pode afetar a segurança da operação. Em uma consulta segura, os dados são separados da consulta SQL por meio de placeholders (como ? ou :param), e os valores são passados separadamente, evitando a possibilidade de injeção de SQL. Isso significa que mesmo que o valor inserido pelo usuário seja malicioso, ele não será interpretado como parte do comando SQL, garantindo a proteção do banco de dados.

Por outro lado, em uma consulta não segura, os valores dos dados são concatenados diretamente na consulta SQL. Isso pode abrir portas para ataques de injeção de SQL, onde um atacante pode manipular a consulta e executar comandos indesejados, como apagar tabelas ou roubar dados.

Portanto, sempre que possível, use consultas parametrizadas para garantir que os dados sejam tratados corretamente, minimizando riscos e mantendo a integridade e segurança do banco de dados.

## Fechando Conexões

\
Com SQLite no Julia (Usando RStudio) Quando você está utilizando o JuliaCall no RStudio para executar comandos Julia, é importante seguir as mesmas boas práticas de fechamento de conexões com bancos de dados que faria em um ambiente Julia puro. Ou seja, após realizar operações no banco de dados, você deve garantir que a conexão com o banco de dados seja fechada e que arquivos temporários, como cópias do banco, sejam removidos.

No Julia, para fechar a conexão com o banco de dados SQLite, você usa a função close(), e, para excluir arquivos, a função rm() pode ser utilizada.

# Exemplo de código no RStudio usando JuliaCall:

```{Julia}
using SQLite
using DataFrames

# Conectar ao banco de dados SQLite (se o banco não existir, ele será criado)
db = SQLite.DB("meu_banco.sqlite")

# Criar uma tabela exemplo (simulando uma tabela de "iris")
SQLite.execute(db, """
    CREATE TABLE IF NOT EXISTS iris (
        SepalLength REAL,
        SepalWidth REAL,
        PetalLength REAL,
        PetalWidth REAL,
        Species TEXT
    )
""")

# Inserir dados na tabela "iris"
SQLite.execute(db, """
    INSERT INTO iris (SepalLength, SepalWidth, PetalLength, PetalWidth, Species) 
    VALUES (5.1, 3.5, 1.4, 0.2, 'setosa'),
           (4.9, 3.0, 1.4, 0.2, 'setosa'),
           (4.7, 3.2, 1.3, 0.2, 'versicolor'),
           (4.6, 3.1, 1.5, 0.2, 'versicolor'),
           (5.0, 3.6, 1.4, 0.2, 'virginica')
""")

# Consultar todos os registros da tabela iris
query = "SELECT * FROM iris"
resultado = DataFrame(SQLite.Query(db, query))
println("Todos os registros da tabela 'iris':")
println(resultado)

# Ordenar os dados por SepalLength de forma decrescente
query = """
SELECT * 
FROM iris
ORDER BY SepalLength DESC
"""
resultado = DataFrame(SQLite.Query(db, query))
println("Registros ordenados por SepalLength em ordem decrescente:")
println(resultado)

# Consultar as espécies únicas
query = "SELECT DISTINCT Species FROM iris"
resultado = DataFrame(SQLite.Query(db, query))
println("Espécies únicas na tabela 'iris':")
println(resultado)

# Filtrar as linhas onde a espécie é 'setosa'
query = "SELECT * FROM iris WHERE Species = 'setosa'"
resultado = DataFrame(SQLite.Query(db, query))
println("Linhas onde a espécie é 'setosa':")
println(resultado)

# Limitar os resultados para as primeiras 3 linhas
query = "SELECT * FROM iris LIMIT 3"
resultado = DataFrame(SQLite.Query(db, query))
println("Primeiros 3 registros da tabela 'iris':")
println(resultado)

# Agrupar por Species e calcular a média de SepalLength, com filtro
query = """
SELECT Species, AVG(SepalLength) as MediaSepalLength
FROM iris
GROUP BY Species
HAVING MediaSepalLength > 5.0
"""
resultado = DataFrame(SQLite.Query(db, query))
println("Espécies com média de SepalLength superior a 5.0:")
println(resultado)

# Fechar a conexão com o banco de dados
close(db)

```

# Considerações Finais

Neste tutorial, exploramos como integrar o SQLite com Julia no RStudio, permitindo realizar operações SQL de forma eficiente em um banco de dados leve e sem servidor. Vimos como importar dados, realizar consultas básicas (como `SELECT`, `ORDER BY`, `WHERE`), inserir dados em tabelas e aplicar boas práticas de segurança para evitar injeção de SQL.

Destacamos a importância de fechar conexões adequadamente após as operações para otimizar recursos. O SQLite é ideal para aplicações que necessitam de um banco de dados simples e portátil, e a combinação com Julia oferece flexibilidade para análise de dados e manipulação avançada.

Com o que foi aprendido, você pode expandir suas habilidades explorando mais funcionalidades do SQLite e Julia, criando soluções eficientes e seguras para trabalhar com bancos de dados locais.
