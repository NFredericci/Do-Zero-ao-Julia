{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Álgebra linear com LinearAlgebra.jl\"\n",
        "description: |\n",
        "  Aprenda e utilize álgebra linear com LinearAlgebra.jl.\n",
        "categories:\n",
        "  - Pacotes\n",
        "  - Ferramentas\n",
        "  - Manipulação de dados\n",
        "author:\n",
        "  - name: Sarah Pereira Teixeira Silva\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/astrogenun\n",
        "date: \"2025-07-24\"\n",
        "image: imagens/algebralinear.png\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: false\n",
        "engine: knirt\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Introdução\n",
        "\n",
        "::: justify\n",
        "A Álgebra Linear constitui a espinha dorsal de diversas áreas do conhecimento científico e tecnológico, como análise de dados, processamento de sinais, otimização, estatística multivariada, machine learning e mecânica quântica. Computacionaomente, uma linguagem eficiente como `Julia` oferece não apenas sintaxe intuitiva, mas também desempenho comparável a linguagens de baixo nível. O pacote `LinearAlgebra.jl`, integrante da biblioteca padrão, disponibiliza uma ampla variedade de funcionalidades para a manipulação eficiente de vetores, matrizes, resolução de sistemas lineares e decomposições matriciais. Neste post, exploraremos o uso do módulo, abordando desde operações elementares até técnicas mais sofisticadas, como decomposições matriciais, projeções e diagonalização.\n",
        ":::\n",
        "\n",
        "## Carregando o pacote\n",
        "\n",
        "O pacote `LinearAlgebra.jl` já está incluído na instalação padrão do Julia. Para utilizá-lo, basta importá-lo com o comando:\n",
        "\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using LinearAlgebra\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Utilizaremos também o pacote `Random` para gerar matrizes aleatórias nos exemplos seguintes:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using Random\n",
        "```\n",
        "\n",
        "\n",
        "## Operações elementares com matrizes e vetores\n",
        "\n",
        "::: justify\n",
        "Iniciamos com a criação de vetores e matrizes, bem como a execução de operações fundamentais, como multiplicação, produto escalar e cálculo de normas:\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "```{julia}\n",
        "A = [1 2; 3 4]      # matriz 2x2\n",
        "v = [1, 2]          # vetor coluna\n",
        "\n",
        "A * v               # multiplicação matriz-vetor\n",
        "dot(v, v)           # produto escalar\n",
        "norm(v)             # norma (magnitude) do vetor\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Operações com matrizes\n",
        "\n",
        "\n",
        "```{julia}\n",
        "transpose(A)        # transposta\n",
        "inv(A)              # inversa\n",
        "det(A)              # determinante\n",
        "tr(A)               # traço da matriz\n",
        "rank(A)             # posto\n",
        "```\n",
        "\n",
        "\n",
        "## Resolvendo sistemas lineares\n",
        "\n",
        "::: justify\n",
        "Em Julia, a forma mais eficiente de resolver um sistema linear (Ax = b) consiste no uso do operador barra invertida `\\`, que seleciona automaticamente o algoritmo numérico apropriado com base nas características da matriz:\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "A = [3 1; 1 2]\n",
        "b = [9, 8]\n",
        "x = A \\ b           # solução do sistema\n",
        "```\n",
        "\n",
        "\n",
        "## Decomposições matriciais\n",
        "\n",
        "::: justify\n",
        "Decomposições permitem entender a estrutura interna de uma matriz, facilitando a resolução de sistemas, o cálculo de autovalores, compressões e outras aplicações numéricas. A seguir, exploramos as principais disponíveis no `LinearAlgebra.jl`:\n",
        ":::\n",
        "\n",
        "### LU (Fatoração de matrizes quadradas)\n",
        "\n",
        "\n",
        "```{julia}\n",
        "lu(A)\n",
        "```\n",
        "\n",
        "\n",
        "### QR (Bastante usada em regressão linear)\n",
        "\n",
        "\n",
        "```{julia}\n",
        "qr(A)\n",
        "```\n",
        "\n",
        "\n",
        "### SVD (Decomposição em valores singulares)\n",
        "\n",
        "\n",
        "```{julia}\n",
        "svd(A)\n",
        "```\n",
        "\n",
        "\n",
        "### Autovalores e autovetores\n",
        "\n",
        "\n",
        "```{julia}\n",
        "eigvals(A)\n",
        "eigvecs(A)\n",
        "```\n",
        "\n",
        "\n",
        "## Álgebra linear com matrizes aleatórias usando `random`\n",
        "\n",
        "::: {style=\"text-align: justify\"}\n",
        "A geração de matrizes aleatórias permite simulações e testes práticos. Veja exemplos de operações úteis com matrizes densas:\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "Random.seed!(123)\n",
        "M = rand(3,3)      # matriz 3x3 com elementos aleatórios\n",
        "\n",
        "norm(M)            # norma de Frobenius\n",
        "I                  # matriz identidade\n",
        "M'                 # transposta conjugada\n",
        "```\n",
        "\n",
        "\n",
        "## Diagonalização de matrizes\n",
        "\n",
        "::: {style=\"text-align: justify\"}\n",
        "Uma matriz $A$ é diagonalizável se existe uma matriz invertível $P$ tal que $D = P^{-1} A P$ seja diagonalizável.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "V = eigvecs(A)\n",
        "D = Diagonal(eigvals(A))\n",
        "P = V\n",
        "P_inv = inv(P)\n",
        "P_inv * A * P ≈ D   # Verificação\n",
        "```\n",
        "\n",
        "\n",
        "::: {style=\"text-align: justify\"}\n",
        "> Obs.: Nem toda matriz é diagonalizável. Em aplicações práticas, a diagonalização é útil, por exemplo, para calcular potências de matrizes com eficiência.\n",
        ":::\n",
        "\n",
        "## Espaços vetorias e projeções ortogonais\n",
        "\n",
        "::: {style=\"text-align: justify\"}\n",
        "Dada uma matriz $A$, seus espaços fundamentais (imagem, núcleo) são essenciais para entender soluções de sistemas e dimensões associadas:\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "nullspace = nullspace(A)     # espaço nulo (ker A)\n",
        "colspace = A[:, :]           # espaço coluna (imagem)\n",
        "```\n",
        "\n",
        "\n",
        "E para projetar um vetor $b$ no subespaço gerado pelas colunas de $A$:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "proj = A * (A \\ b)\n",
        "```\n",
        "\n",
        "\n",
        "Essa projeção ortogonal é usada em mínimos quadrados.\n",
        "\n",
        "## Conclusão\n",
        "\n",
        "::: {style=\"text-align: justify\"}\n",
        "O pacote `LinearAlgebra.jl` oferece ferramentas robustas, rápidas e versáteis para o tratamento de problemas de álgebra linear em Julia. A combinação com bibliotecas de visualização como `Plots.jl`, já mostradas aqui no blog, e outras de aprendizado de máquina torna sua utilização ainda mais poderosa em aplicações científicas e tecnológicas. Sua implementação é baseada em bibliotecas otimizadas como BLAS e LAPACK, garantindo um desempenho extremamente competitivo. O estudo da Álgebra Linear computacionalmente não apenas facilita a resolução de problemas práticos como também aprofunda a intuição matemática sobre transformações lineares, autovalores, espaços vetoriais e estabilidade numérica. Para consolidar seus conhecimentos, recomenda-se também a leitura da documentação oficial e a prática com aplicações reais em modelagem, machine learning e análise de dados.\n",
        ":::\n",
        "\n",
        "-   [Biblioteca padrão de Álgebra Linear numérica em Julia](https://julia-cn.readthedocs.io/pt-br/latest/stdlib/linalg.html)\n",
        "-   [Documentação oficial do pacote LinearAlgebra.jl](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/) :::\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::"
      ],
      "id": "38fc1778"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}