{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Manipulação de strings em Julia\"\n",
        "description: |\n",
        "     Aprenda a manipular strings em Julia, desde a criação de objetos até diversas operações e formatações.\n",
        "categories:\n",
        "  - Primeiros passos\n",
        "  - Ferramentas\n",
        "author:\n",
        "  - name: Vitor Ribas Perrone\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/VitorRibasP\n",
        "    orcid: 0009-0009-6923-7712\n",
        "date: \"2025-08-07\"\n",
        "image: imagens/juliastrings.png\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "::: justify\n",
        "Manipular strings é essencial mesmo em análises estatísticas, seja para organizar nomes de variáveis, limpar bancos de dados ou gerar relatórios automatizados. No Julia, a manipulação de strings é simples e poderosa, permitindo desde operações básicas até buscas complexas usando expressões regulares. Neste post, vamos explorar como criar, modificar e formatar strings no Julia base.\n",
        ":::\n",
        "\n",
        "## Criação de strings\n",
        "No Julia, criamos um objeto do tipo `String` colocando o texto entre aspas duplas (\") ou três aspas duplas (\"\"\").\n",
        "\n",
        "```{julia}\n",
        "\"a\"\n",
        "\"\"\"a\"\"\"\n",
        "```\n",
        "\n",
        "As duas maneiras de criar o objeto são equivalentes, então se sinta livre para usar o que preferir.\n",
        "\n",
        "```{julia}\n",
        "\"a\" == \"\"\"a\"\"\"\n",
        "```\n",
        "\n",
        "Além disso, é interessante estar atento que alguns comandos são especiais, como o `\\n`, que representa uma quebra de linha.\n",
        "\n",
        "```{julia}\n",
        "\"a\n",
        "b\"\n",
        "\"a\\nb\"\n",
        "```\n",
        "\n",
        "Para criar o objeto ignorando qualquer caractere especial, ou seja, apenas o texto bruto, basta inserir `raw` antes das aspas.\n",
        "\n",
        "```{julia}\n",
        "raw\"a\\nb\"\n",
        "```\n",
        "\n",
        "## Caracteres\n",
        "Um detalhe importante que Julia possui é a distinção entre dois tipos de objeto, `String` e `Char`, que também representam textos, mas possuem apenas um caractere e são criados com aspas simples (') ao invés das duplas. \n",
        "\n",
        "```{julia}\n",
        "typeof(\"a\")\n",
        "typeof('a')\n",
        "```\n",
        "\n",
        "Objetos do tipo `Char` possuem algumas particularidades interessantes. Por exemplo, são compatíveis com somas e subtrações, em que a diferença entre os respectivos códigos dos caracteres é calculada.\n",
        "\n",
        "```{julia}\n",
        "'A' + 1\n",
        "'E' - 'C'\n",
        "```\n",
        "\n",
        "Toda essa questão dos caracteres está relacionada com *Unicode/UTF-8*, uma codficação de caracteres que inclui as letras tradicionais e diversos caracteres especiais. Para ver todos os códigos disponíveis, basta acessar [este link](https://www.charset.org/utf-8). Para utilizar um caractere por meio do código *UTF-8*, basta utilizar `\\u` e em seguida o respectivo código.\n",
        "\n",
        "```{julia}\n",
        "'\\u2200'\n",
        "```\n",
        "\n",
        "## Junção e separação de strings\n",
        "A maneira mais elementar para unificar strings em uma é por meio do operador `*`, como se fosse realizado um produto entre as strings.\n",
        "\n",
        "```{julia}\n",
        "\"banana\" * \" \" * \"pera\"\n",
        "```\n",
        "\n",
        "Para unificar todas as strings dentro de um mesmo vetor, basta utilizar a função `join` e então especificar qual será o separador para os elementos.\n",
        "\n",
        "```{julia}\n",
        "frutas = [\"banana\", \"pera\", \"morango\"]\n",
        "join(frutas, \", \")\n",
        "join(frutas, \"-\")\n",
        "```\n",
        "\n",
        "Já para realizar o processo inverso, isto é, separar uma string em um vetor, utiliza-se a função `split`, e então se especifica qual o ponto para os cortes.\n",
        "\n",
        "```{julia}\n",
        "split(\"banana-pera-morando\", \"-\")\n",
        "```\n",
        "\n",
        "Também é possível copiar uma string diversas vezes por meio da função `repeat`, que retorna uma string com o respectivo texto copiado o número de vezes que for especificado.\n",
        "\n",
        "```{julia}\n",
        "repeat(\"ba\", 5)\n",
        "```\n",
        "\n",
        "## Busca e substituição\n",
        "Para acessar partes da string, é como se fosse acessar um vetor em que cada caractere é um elemento. Podemos tanto selecionar tanto uma só posição, tornando a saída um caractere quanto selecionar uma sequência de letras, tornando a saída uma string.  \n",
        "\n",
        "```{julia}\n",
        "\"abcd\"[1]\n",
        "\"abcd\"[end]\n",
        "\"abcd\"[2:end]\n",
        "```\n",
        "\n",
        "::: {.callout-note icon=false}\n",
        "### Observação\n",
        "Ao extrair somente um caractere de uma stirng, a depender de como realizamos isso, a saída é um tipo diferente de objeto.\n",
        "\n",
        "```{julia}\n",
        "\"abcd\"[1]\n",
        "\"abcd\"[1:1]\n",
        "```\n",
        "\n",
        ":::\n",
        "A seguir, veremos algumas funções que realizam buscas dentro de strings para efetuar alguns procedimentos. Para isso, uma possibilidade é a utilização de expressões regulares. Para conhecer em detalhes a sintaxe das expressões regulares, basta acessar [este link](https://pt.wikipedia.org/wiki/Express%C3%A3o_regular). Em Julia, é possível criar uma string como sendo uma expressão regular inserindo um `r` antes das aspas.\n",
        "\n",
        "```{julia}\n",
        "r\".\"\n",
        "```\n",
        "\n",
        "3 funções muito úteis na detecção de elementos dentro de strings são:\n",
        "- `occursin`: verifica se determinado texto está dentro da string;\n",
        "- `findfirst`: extrai a posição da primeira vez que o texto aparece na string;\n",
        "- `findlast`: extrai a posição da última vez que o texto aparece na string.\n",
        "\n",
        "```{julia}\n",
        "texto = \"Zero ao Julia\"\n",
        "occursin(\"Julia\", texto)   \n",
        "findfirst(\"a\", texto)  \n",
        "findlast(\"a\", texto)       \n",
        "```\n",
        "\n",
        "As funções `startswith` e `endswith` verificam se uma determinada string começa ou termina, respectivamente, com determinado texto. \n",
        "\n",
        "```{julia}\n",
        "texto = \"Julia\"\n",
        "startswith(texto, \"j\")\n",
        "endswith(texto, \"ia\")\n",
        "```\n",
        "\n",
        "Também é possível substituir trechos de texto usando a função `replace`.\n",
        "\n",
        "```{julia}\n",
        "replace(\"banana\", \"a\" => \"o\")\n",
        "```\n",
        "\n",
        "\n",
        "## Formatações\n",
        "Para alternar as letras de uma string ente maiúsculas e minúsculas, existem 3 principais funções:\n",
        "- `uppercase`: torna todas as letras maiúsculas;\n",
        "- `lowercase`: torna todas as letras minúsculas;\n",
        "- `titlecase`: torna a primeira letra de cada palavra maiúscula e as demais minúsculas.\n",
        "\n",
        "```{julia}\n",
        "texto = \"ZERO ao julia\"\n",
        "uppercase(texto)\n",
        "lowercase(texto)\n",
        "titlecase(texto)\n",
        "```\n",
        "\n",
        "Como não existe uma função específica para deixar apenas a primeira letra da primeira palavra maiúscula e as demais minúsculas, para realizar esse processo precisamos combinar `uppercase` com `lowercase`. \n",
        "\n",
        "```{julia}\n",
        "uppercase(texto[1]) * lowercase(texto[2:end])\n",
        "```\n",
        "\n",
        "\n",
        "Com a função `reverse`, é possível obter uma string de trás para frente.\n",
        "\n",
        "```{julia}\n",
        "reverse(\"abcde\")\n",
        "```\n",
        "\n",
        "Existe uma forma bem direta de remover espaços nos começos e finais das strings. Para remover na esquerda, utiliza-se `lstrip`; na direita, `rstrip`; e nas duas direções ao mesmo tempo, `strip`.\n",
        "\n",
        "```{julia}\n",
        "lstrip(\"  julia  \")\n",
        "rstrip(\"  julia  \")\n",
        "strip(\"  julia  \")\n",
        "```\n",
        "\n",
        "\n",
        "## Operações numéricas e uso de variáveis dentro de strings\n",
        "Por fim, é possível utilizar operações e valores de variáveis dentro das strings, isso é feito inserindo o que é de interesse entre um `$()`. \n",
        "\n",
        "```{julia}\n",
        "a = 2\n",
        "b = 5\n",
        "\"Soma: $(a+b)\"\n",
        "``` \n",
        "\n",
        "\n",
        "## Conclusão\n",
        "::: justify\n",
        "Portanto, manipular strings com eficiência no Julia é fundamental para análises estatísticas, pois dados reais raramente chegam prontos para análise. Ao dominar essas técnicas, você estará mais preparado para limpar, formatar e organizar informações textuais em seus projetos, integrando-as sem esforço com o restante do seu fluxo de trabalho estatístico.\n",
        ":::\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::"
      ],
      "id": "2a21d8c5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}