{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Pacote Gadfly - Como produzir gráficos interativos em Julia\"\n",
        "description: |\n",
        "  Neste blog, te mostramos como utilizar o pacote Gadfly, explicando sua sintaxe e trazendo exemplos de gráficos interativos!\n",
        "categories:\n",
        "  - Julia\n",
        "  - Gráficos\n",
        "  - Análise de Dados\n",
        "author:\n",
        "  - name: Carlos Trucíos\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://ctruciosm.github.io\n",
        "    orcid: 0000-0001-8746-8877\n",
        "  - name: Leonardo dos Santos\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://linkedin.com/in/leonardo-dos-santoos\n",
        "    orcid: 0009-0008-8927-1507\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "\n",
        "Voce já se perguntou em como fazer gráficos manipuláveis em Julia? Nesse blog, utilizando bases de dados clássicas da linguagem R, vamos te mostrar exatamente como produzir diferentes tipos de gráficos e como salvá-los em diferentes tipos de formatação!\n",
        "\n",
        "## Gadfly\n",
        "\n",
        "### Pacotes Necessários\n",
        "\n",
        "Vamos adicionar alguns pacotes essenciais para nossa análise:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Leitura de pacotes essenciais\n",
        "using Pkg\n",
        "Pkg.add(\"Gadfly\") # Pacote principal para gráficos\n",
        "Pkg.add(\"RDatasets\") # Pacote de datasets clássicos do R que utilizaremos\n",
        "Pkg.add(\"DataFrames\") # para manipulação de data frames\n",
        "Pkg.add(\"Statistics\") # permite uso de funções estatísticas como a média\n",
        "Pkg.add(\"Measures\") # para que possamos usar medidas como \"cm\"\n",
        "Pkg.add(\"Dates\") # para manipularmos vetores para que sigam o formato de Data\n",
        "Pkg.add(\"Random\") # para reprodutibilidade de alguns códigos\n",
        "```\n",
        "\n",
        "\n",
        "### Argumentos da Função plot() do Gadfly\n",
        "\n",
        "Para criar gráficos pelo pacote Gadfly, utilizaremos o comando plot(), que possui os seguintes argumentos:\n",
        "\n",
        "plot(\n",
        "    BaseDeDados,\n",
        "    x     = :ColunaX,\n",
        "    y     = :ColunaY,\n",
        "    color = :FatorAgrupamento,\n",
        "    shape = :FormatoDosPontos,\n",
        "    size  = :TamanhoDosPontos,\n",
        "    Geom.point\n",
        "    Geom.line <- você pode agrupar dois tipos diferentes de gráficos!\n",
        "    Theme(...) <- mudar tema do gráfico (cores, formato, etc)\n",
        ")\n",
        "\n",
        "### Gráficos Básicos\n",
        "\n",
        "#### Gráfico via Vetores\n",
        "\n",
        "Vamos rodar um gráfico bem simples, definindo dois vetores X e Y.\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using Gadfly\n",
        "\n",
        "plot(x = [1,2,3], y = [1,2,5])\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "#### Gráfico de Pontos\n",
        "\n",
        "Agora, vamos usar o dataset \"iris\" do RDatasets para analisar a Largura x Comprimento de sépalas, organizadas por Espécie. Veja que, por meio dessa simples análise, podemos concluir que sépalas do tipo Setosa são mais largas e menos compridas do que sépalas de outras espécies.\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using Gadfly, RDatasets\n",
        "\n",
        "iris = dataset(\"datasets\",\"iris\") #definição da base de dados\n",
        "\n",
        "plot(iris,\n",
        "    x=:SepalLength,\n",
        "    y=:SepalWidth,\n",
        "    color=:Species,\n",
        "    Geom.point)\n",
        "```\n",
        "\n",
        "\n",
        "#### Gráfico de Barras\n",
        "\n",
        "Agora, digamos que nosso objetivo é fazer uma análise mais simples da base de dados: queremos analisar a média do comprimento de cada espécie. Para isso, precisaremos criar um novo banco que possua as informações necessárias (Espécie e Média do comprimento) para, então, produzir um gráfico de barras, que seria o mais ideal para mostrar essa informação. Veja o código abaixo!\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using Gadfly, RDatasets, DataFrames, Statistics, Measures\n",
        "\n",
        "iris = dataset(\"datasets\",\"iris\") # definição da base de dados\n",
        "\n",
        "mean_df = combine(\n",
        "    groupby(iris, :Species), #agrupando por espécie, no dataframe iris\n",
        ":SepalLength => mean => :MeanSepalLength # selecionando o comprimento da sépala, tomando a média e nomeando a média como MeanSepalLength\n",
        ")\n",
        "\n",
        "plot(mean_df, \n",
        "    x = :Species, \n",
        "    y = :MeanSepalLength,\n",
        "    Geom.bar,\n",
        "    Theme(bar_spacing=0.5cm) # adiçao de um espaçamento entre as barras de 0.5cm\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "#### Gráficos de Caixa (Boxplots)\n",
        "\n",
        "Também podemos produzir boxplots (gráficos de caixa) para analisar a distribuição do comprimento de sépala Veja o seguinte gráfico:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using Gadfly, RDatasets\n",
        "\n",
        "iris = dataset(\"datasets\",\"iris\") # definição da base de dados\n",
        "\n",
        "plot(iris, \n",
        "    x = :Species,\n",
        "    y = :SepalLength,\n",
        "    color = :Species, #adição de cor por estética\n",
        "    Geom.boxplot # gráfico boxplot\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "#### Gráfico de \n",
        "\n",
        "Agora, vamos criar um banco fictício que imita uma série temporal (um conjunto de observações medidos por tempo, como valor de uma bolsa a cada dia). Seguindo o código abaixo, definimos uma base de dados com valores para 3 bolsas de valores fictícias durante 50 dias a partir de 1 de Janeiro de 2020. Definiremos a Bolsa A com uma tendência crescente (valores crescem a cada dia); a Bolsa B com uma tendência descrescente (valores decaem a cada dia); e a Bolsa C sem tendência (valores são, em média, os mesmos).\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using DataFrames, Dates, Random\n",
        "\n",
        "# CRIAÇÃO DA BASE DE DADOS\n",
        "\n",
        "Random.seed!(123) # reprodutibilidade\n",
        "\n",
        "n = 50  # número de pontos\n",
        "start_date = Date(2020, 1, 1) # data inicial (1/1/2020)\n",
        "dates = [start_date + Day(i) for i in 0:n-1] #vetor de datas\n",
        "\n",
        "types = [\"Bolsa A\", \"Bolsa B\", \"Bolsa C\"] #bolsas fictícias\n",
        "\n",
        "# definição das colunas do nosso banco de dados fictício\n",
        "date_col = repeat(dates, inner=length(types)) #data\n",
        "type_col = repeat(types, outer=n) # tipo da bolsa\n",
        "\n",
        "index_col = repeat(1:n, inner=length(types))\n",
        "trend_map = Dict(\"Bolsa A\" => 0.1, \"Bolsa B\" => -0.09, \"Bolsa C\" => 0.01)\n",
        "value_col = 10 .+ [trend_map[t] for t in type_col] .* index_col .+ randn(length(date_col)) .* 0.5 #criação de um vetor de valores de cada bolsa em que há uma tendência de crescimento/estagnação/descrescimento a cada tempo\n",
        "\n",
        "# definição de um dataframe com nossas colunas\n",
        "serie_temporal = DataFrame(Data =date_col, Bolsa =type_col, Valores =value_col)\n",
        "\n",
        "\n",
        "first(serie_temporal,10) # glimpse do banco de dados\n",
        "```\n",
        "\n",
        "\n",
        "Com essa base de dados, podemos aplicar uma função muito interessante do Gadfly: a possibilidade de utilizar dois tipos de gráficos em um só, como fazemos nesse seguinte bloco, utilizando tanto um gráfico de pontos como um de linhas. Veja abaixo!\n",
        "\n",
        "\n",
        "using Gadfly\n",
        "\n",
        "plot(serie_temporal,\n",
        "    x = :Data,\n",
        "    y = :Valores,\n",
        "    color = :Bolsa,\n",
        "    Geom.point,\n",
        "    Geom.line)"
      ],
      "id": "665602c5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}