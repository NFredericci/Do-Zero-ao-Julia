---
title: "Manipulação e Processamento de Imagens em Julia"
description: |
  Um guia introdutório em Julia para processamento de imagens utilizando pacotes essenciais como Images.jl, ImageIO.jl, ImageMagick.jl, ImageTransformations.jl e ImageFiltering.jl. Aprenda a carregar, salvar, manipular e aplicar filtros em imagens de forma prática e eficiente.
categories:
  - Guia
author:
  - name: Caio Frare
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/caiofrare
  - name: Carlos Trucíos
    affiliation: "Universidade Estadual de Campinas"
    url: https://ctruciosm.github.io
    orcid: 0000-0001-8746-8877
date: "2025-08-20"
image: imagens/imagem_capa.png
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
draft: true
---

## Introdução

O processamento de imagens é uma tarefa essencial em diversas áreas, desde ciência de dados e visão computacional até aplicações mais simples de manipulação e análise visual. A linguagem Julia, com sua combinação de alto desempenho e sintaxe expressiva, oferece um ecossistema poderoso para lidar com esse tipo de dado.

Neste guia, vamos explorar alguns pacotes fundamentais que tornam o trabalho com imagens em Julia muito mais prático:

- Images.jl → núcleo para representar e manipular imagens.

- ImageIO.jl → leitura e escrita de arquivos em diferentes formatos.

- ImageTransformations.jl → operações geométricas como redimensionamento e rotação.

- ImageFiltering.jl → aplicação de filtros clássicos, como média e gaussiano.

Nos exemplos a seguir, você verá como carregar e salvar imagens, realizar operações básicas de manipulação e aplicar filtros para transformar os dados visuais. O objetivo é fornecer um guia introdutório que pode servir como ponto de partida para aplicações mais avançadas.

## Instalação

Os pacotes utiliados podem ser instalados diretamente via Pkg:

```{julia}

using Pkg
Pkg.add([
    "Images",
    "ImageIO",
    "ImageTransformations",
    "ImageFiltering"
])
```

## Carregando uma imagem

O fluxo básico para abrir e exibir uma imagem é simples:

```{julia}

using Images, ImageIO

img = load("imagens/gato.jpg") # carregando imagem
display(img)                   # exibe no ambiente 

```

![Gato de exemplo](imagens/gato.jpg)

## Salvando uma Imagem

Você também pode salvar imagens no formato desejado (nesse caso transformei de .jpg para .png):

```{julia}

save("imagem.png", img)

```

## Operações Básicas

Algumas operações comuns incluem:

```{julia}

using ImageTransformations

# Dimensões da imagem
size(img)         # (altura, largura)
eltype(img)       # Tipo de pixel

# Convertendo para escala de cinza
img_gray = Gray.(img)

# Redimensionando
img_small = imresize(img, (100, 100))

# Cortando a imagem
img_crop = img[1:2000, 1:2000]

```

<!--
```{julia}
save("imagens/imagem_cinza.png", img_gray)

save("imagens/imagem_pequena.png", img_small)

save("imagens/imagem_crop.png", img_crop)
```
-->

Que nos fornecem os seguintes resultados:

- Imagem na escala de cinza;
![gato cinza](imagens/imagem_cinza.png)

- Imagem pequena;
![gato pequeno](imagens/imagem_pequena.png)

- Imagem cortada;
![gato cortado](imagens/imagem_crop.png)

## Aplicando Filtros:

Podemos usar filtros por exemplo para borrar imagens, nesse exemplo usaremos o filtro gaussiano:

```{julia}
using Images, ImageFiltering

# Filtro gaussiano
kernel_gauss = Kernel.gaussian(5)
img_gauss = imfilter(img, kernel_gauss)
```

<!--
```{julia}
save("imagens/imagem_gauss.png", img_gauss)
```
-->

Que nos fornece o seguinte resultado:

- Imagem com filtro de gauss;
![gato gauss](imagens/imagem_gauss.png)
## Conclusão

Neste post vimos como Julia oferece um ecossistema bastante completo para processamento e manipulação de imagens, indo desde as etapas iniciais de carregar e salvar arquivos até a aplicação de filtros para transformar visualmente os dados.

O foco foi dar uma visão geral dos pacotes mais utilizados, permitindo que você tenha um ponto de partida sólido. A partir daqui, você pode explorar tópicos mais avançados, como segmentação de imagens, visão computacional, reconhecimento de padrões e até integração com modelos de Machine Learning.

Boa diversão com esses pacotes!


::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.
:::
