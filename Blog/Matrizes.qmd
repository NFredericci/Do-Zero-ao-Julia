---
title: "Matrizes em Julia"
description: |
  Matrizes são estruturas centrais em diversas aplicações científicas e computacionais, e *Julia* oferece ferramentas poderosas e eficientes para manipulá-las de forma intuitiva. Neste post, você aprenderá a criar matrizes, acessar elementos, realizar operações e explorar suas principais propriedades.
categories:
  - Matriz
author:
  - name: Caio Frare
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/caiofrare
  - name: Nicole Fredericci
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/NFredericci
date: "2025-08-26"
image: imagens/matriz.png 
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
engine: knitr
draft: false
---


```{r}
#| echo: false
Sys.setenv(JULIA_HOME = "/Users/ctrucios/.juliaup/bin/")
```


## Introdução - o que são Matrizes?

::: {.justify}
Matrizes são estruturas matemáticas em formato tabular, organizadas em linhas e colunas, com operações bem definidas como adição, subtração, multiplicação e transposição. De maneira intuitiva, podem ser vistas como uma extensão bidimensional dos vetores. São amplamente utilizadas para armazenar e manipular dados, desempenhando papel central em estatística, econometria e aprendizado de máquina.

Neste post, você aprenderá a criar matrizes, acessar elementos, realizar operações e explorar suas principais propriedades. Também será apresentado, de forma breve, como utilizar o pacote  `LinearAlgebra.jl` para funções relacionadas à álgebra linear e cláculo matricial.

:::

## Criando Matrizes

::: {.justify}
Em `Julia`, a notação tradicional para matrizes utiliza colchetes `[ ]`. Dentro deles, o espaço `( )` separa as colunas, o ponto e vírgula (`;`) separa as linhas, e o triplo ponto e vírgula (`;;;`) adiciona uma nova dimensão, permitindo criar arrays tridimensionais a partir de matrizes bidimensionais.
:::

```{julia}
# Vetor → array 1D (uma dimensão)
v = [1 2 3 4 5 6]
# Matriz → array 2D (linhas e colunas)
m = [1 2 3; 4 5 6]
# Array → array 3D (pilha de matrizes 2D)
M = [1 2 3; 4 5 6; 7 8 9 ;;; 10 11 12; 13 14 15; 16 17 18]
```

::: {.justify}
Além de escrever manualmente com colchetes, `Julia` oferece funções que facilitam a criação de matrizes com formatos específicos ou preenchimento automático. Algumas das mais comuns são:

-   `zeros(m, n)`: cria uma matriz $m \times n$ preenchida com zeros.

-   `ones(m, n)`: gera uma matriz $m \times n$  preenchida com uns.

-   `rand(m, n)`: cria uma matriz $m \times n$  com valores aleatórios entre 0 e 1.

-   `reshape(v, m, n)`: transforma um vetor `v` ou matriz existente em uma nova forma $m \times n$ .

-   `Matrix(...)`: converte estruturas em matriz; por exemplo, `Matrix(I, m, m)` cria uma matriz identidade $m \times n$ .
:::

```{julia}
A = zeros(2, 3)
B = ones(3, 2)
C = rand(2, 2)
# Transformando um vetor em uma matriz 2x3
v = 1:6
D = reshape(v, 2, 3)
# Matriz identidade 4x4 com elementos inteiros
E = Matrix{Int64}(I, 4, 4)
# Matriz 3x2 criada com expressão compacta (com base em i + j)
F = [i + j for i in 1:3, j in 1:2]
```

## Indexação e Acesso a Elementos

::: {.justify}
Assim como em `R`, a indexação em `Julia` é *1-based*, ou seja, a contagem começa a partir de 1 — diferente do Python, que é *0-based*.

Para acessar os elementos de uma matriz, usamos a notação `matriz[linha, coluna]`. Também é possível acessar linhas e colunas inteiras ou selecionar subconjuntos da matriz utilizando o operador de dois-pontos (`:`), que indica "todos os elementos" naquela dimensão.
:::

```{julia}
# Cria uma matriz 3x3 com valores de 1 a 9
m1 = reshape(1:9, 3, 3)
# Acessa o elemento da 1ª linha, 2ª coluna 
m1[1, 2]
# Acessa o elemento da 3ª linha, 3ª coluna 
m1[3, 3]
# Acessa toda a 2ª linha 
m1[2, :]
# Acessa toda a 1ª coluna 
m1[:, 1]
# Acessa um bloco 2x2 
m1[1:2, 2:3]
```

## Operações

::: {.justify}
`Julia` possibilita a execução de operações matriciais de forma simples e direta.
:::

### Adição e Subtração

```{julia}
G = [1 2; 3 4]
H = [5 6; 7 8]
G + H  
G - H  
```

### Multiplicação

::: {.justify}
Existem dois tipos de multiplicação em `Julia`:

-   `*`: Multiplicação matricial.

-   `.*`: Multiplicação elemento a elemento.
:::

```{julia}
G * H
G * 2
G .* H
```

### Transposição
::: {.justify}
Calcular a transposta de uma matriz com `Julia` pode ser feito de duas formas: utilizando `transpose()` ou utilizando o operador `'`. Contudo, no caso da matriz conter números complexos, `'` calculará a conjugada complexa.
:::

```{julia}
transpose(G)
G'
```

## Propriedades e Funções Úteis

::: {.justify} 
Usando o pacote `LinearAlgebra.jl`, que já faz parte da instalação padrão do *Julia*, podemos acessar diversas propriedades e aplicar funções úteis às matrizes. Antes de utilizá-las, é necessário carregar o pacote no ambiente:
:::

```{julia}
using LinearAlgebra
```


### Propriedades Básicas

::: {.justify}
-   `size(m)`: retorna uma tupla com o número de linhas e colunas.

-   `length(m)`: indica o total de elementos presentes na matriz.

-   `eltype(m)`: retorna o tipo dos elementos da matriz.

-   `ndims(m)`: retorna o número de dimensões (normalmente 2, no caso de matrizes).
:::

```{julia}
# Criando uma matriz 2x2
J = [1 2; 3 4]
size(J)
length(J)
eltype(J)
ndims(J)
```

### Operações com Álgebra Linear

::: {.justify}
-   `det(m)`: calcula o determinante da matriz.

-   `inv(m)`: retorna a matriz inversa, se ela existir.

-   `rank(m)`: retorna o posto da matriz (número de linhas/colunas linearmente independentes).

-   `eigvals(m)`: obtém os autovalores da matriz.

-   `eigvecs(m)`: obtém os autovetores correspondentes.

-   `tr(m)`: calcula o traço da matriz (soma dos elementos da diagonal principal).
:::

```{julia}
# Criando uma matriz 2x2
J = [1 2; 3 4]
det(J)
inv(J)
rank(J)
eigvals(J)
eigvecs(J)
tr(J)
```

## Conclusão

::: {.justify}
Este foi um guia básico sobre o uso de matrizes em `Julia`, abordando desde a criação até operações fundamentais e funções úteis com o pacote `LinearAlgebra.jl`. Por serem estruturas essenciais em inúmeras áreas científicas e computacionais, `Julia` oferece ferramentas poderosas e eficientes para manipular matrizes de forma intuitiva.

Nos próximos posts, exploraremos tópicos mais avançados, como sistemas lineares, decomposições matriciais e aplicações de matrizes em *Machine Learning*. Até lá!
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.
:::
