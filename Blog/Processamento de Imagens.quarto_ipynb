{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Manipulação e Processamento de Imagens em Julia\"\n",
        "description: |\n",
        "  Um guia introdutório em Julia para processamento de imagens utilizando pacotes essenciais como Images.jl, ImageIO.jl, ImageMagick.jl, ImageTransformations.jl e ImageFiltering.jl. Aprenda a carregar, salvar, manipular e aplicar filtros em imagens de forma prática e eficiente.\n",
        "categories:\n",
        "  - Guia\n",
        "author:\n",
        "  - name: Caio Frare\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/caiofrare\n",
        "  - name: Carlos Trucíos\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://ctruciosm.github.io\n",
        "    orcid: 0000-0001-8746-8877\n",
        "date: \"2025-08-20\"\n",
        "image: imagens/imagem_capa.png\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "\n",
        "O processamento de imagens é uma tarefa essencial em diversas áreas, desde ciência de dados e visão computacional até aplicações mais simples de manipulação e análise visual. A linguagem Julia, com sua combinação de alto desempenho e sintaxe expressiva, oferece um ecossistema poderoso para lidar com esse tipo de dado.\n",
        "\n",
        "Neste guia, vamos explorar alguns pacotes fundamentais que tornam o trabalho com imagens em Julia muito mais prático:\n",
        "\n",
        "- Images.jl → núcleo para representar e manipular imagens.\n",
        "\n",
        "- ImageIO.jl → leitura e escrita de arquivos em diferentes formatos.\n",
        "\n",
        "- ImageTransformations.jl → operações geométricas como redimensionamento e rotação.\n",
        "\n",
        "- ImageFiltering.jl → aplicação de filtros clássicos, como média e gaussiano.\n",
        "\n",
        "Nos exemplos a seguir, você verá como carregar e salvar imagens, realizar operações básicas de manipulação e aplicar filtros para transformar os dados visuais. O objetivo é fornecer um guia introdutório que pode servir como ponto de partida para aplicações mais avançadas.\n",
        "\n",
        "## Instalação\n",
        "\n",
        "Os pacotes utiliados podem ser instalados diretamente via Pkg:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "\n",
        "using Pkg\n",
        "Pkg.add([\n",
        "    \"Images\",\n",
        "    \"ImageIO\",\n",
        "    \"ImageTransformations\",\n",
        "    \"ImageFiltering\"\n",
        "])\n",
        "```\n",
        "\n",
        "\n",
        "## Carregando uma imagem\n",
        "\n",
        "O fluxo básico para abrir e exibir uma imagem é simples:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "\n",
        "using Images, ImageIO\n",
        "\n",
        "img = load(\"imagens/gato.jpg\") # carregando imagem\n",
        "display(img)                   # exibe no ambiente \n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "![Gato de exemplo](imagens/gato.jpg)\n",
        "\n",
        "## Salvando uma Imagem\n",
        "\n",
        "Você também pode salvar imagens no formato desejado (nesse caso transformei de .jpg para .png):\n",
        "\n",
        "\n",
        "```{julia}\n",
        "\n",
        "save(\"imagem.png\", img)\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Operações Básicas\n",
        "\n",
        "Algumas operações comuns incluem:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "\n",
        "using ImageTransformations\n",
        "\n",
        "# Dimensões da imagem\n",
        "size(img)         # (altura, largura)\n",
        "eltype(img)       # Tipo de pixel\n",
        "\n",
        "# Convertendo para escala de cinza\n",
        "img_gray = Gray.(img)\n",
        "\n",
        "# Redimensionando\n",
        "img_small = imresize(img, (100, 100))\n",
        "\n",
        "# Cortando a imagem\n",
        "img_crop = img[1:2000, 1:2000]\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "<!--\n",
        "\n",
        "```{julia}\n",
        "save(\"imagens/imagem_cinza.png\", img_gray)\n",
        "\n",
        "save(\"imagens/imagem_pequena.png\", img_small)\n",
        "\n",
        "save(\"imagens/imagem_crop.png\", img_crop)\n",
        "```\n",
        "\n",
        "-->\n",
        "\n",
        "Que nos fornecem os seguintes resultados:\n",
        "\n",
        "- Imagem na escala de cinza;\n",
        "![gato cinza](imagens/imagem_cinza.png)\n",
        "\n",
        "- Imagem pequena;\n",
        "![gato pequeno](imagens/imagem_pequena.png)\n",
        "\n",
        "- Imagem cortada;\n",
        "![gato cortado](imagens/imagem_crop.png)\n",
        "\n",
        "## Aplicando Filtros:\n",
        "\n",
        "Podemos usar filtros por exemplo para borrar imagens, nesse exemplo usaremos o filtro gaussiano:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "using Images, ImageFiltering\n",
        "\n",
        "# Filtro gaussiano\n",
        "kernel_gauss = Kernel.gaussian(5)\n",
        "img_gauss = imfilter(img, kernel_gauss)\n",
        "```\n",
        "\n",
        "\n",
        "<!--\n",
        "\n",
        "```{julia}\n",
        "save(\"imagens/imagem_gauss.png\", img_gauss)\n",
        "```\n",
        "\n",
        "-->\n",
        "\n",
        "Que nos fornece o seguinte resultado:\n",
        "\n",
        "- Imagem com filtro de gauss;\n",
        "![gato gauss](imagens/imagem_gauss.png)\n",
        "## Conclusão\n",
        "\n",
        "Neste post vimos como Julia oferece um ecossistema bastante completo para processamento e manipulação de imagens, indo desde as etapas iniciais de carregar e salvar arquivos até a aplicação de filtros para transformar visualmente os dados.\n",
        "\n",
        "O foco foi dar uma visão geral dos pacotes mais utilizados, permitindo que você tenha um ponto de partida sólido. A partir daqui, você pode explorar tópicos mais avançados, como segmentação de imagens, visão computacional, reconhecimento de padrões e até integração com modelos de Machine Learning.\n",
        "\n",
        "Boa diversão com esses pacotes!\n",
        "\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::"
      ],
      "id": "79a9ad17"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}