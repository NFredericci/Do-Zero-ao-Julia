---
title: "Manipulação de strings em Julia"
description: |
     Aprenda a manipular strings em Julia, desde a criação de objetos até diversas operações e formatações.
categories:
  - Primeiros passos
  - Ferramentas
author:
  - name: Vitor Ribas Perrone
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/VitorRibasP
    orcid: 0009-0009-6923-7712
date: "2025-08-07"
image: imagens/juliastrings.png
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
draft: true
---

## Introdução
::: justify
Manipular strings é essencial mesmo em análises estatísticas, seja para organizar nomes de variáveis, limpar bancos de dados ou gerar relatórios automatizados. No Julia, a manipulação de strings é simples e poderosa, permitindo desde operações básicas até buscas complexas usando expressões regulares. Neste post, vamos explorar como criar, modificar e formatar strings no Julia base.
:::

## Criação de strings
No Julia, criamos um objeto do tipo `String` colocando o texto entre aspas duplas (") ou três aspas duplas (""").
```{julia}
"a"
"""a"""
```
As duas maneiras de criar o objeto são equivalentes, então se sinta livre para usar o que preferir.
```{julia}
"a" == """a"""
```
Além disso, é interessante estar atento que alguns comandos são especiais, como o `\n`, que representa uma quebra de linha.
```{julia}
"a
b"
"a\nb"
```
Para criar o objeto ignorando qualquer caractere especial, ou seja, apenas o texto bruto, basta inserir `raw` antes das aspas.
```{julia}
raw"a\nb"
```
## Caracteres
Um detalhe importante que Julia possui é a distinção entre dois tipos de objeto, `String` e `Char`, que também representam textos, mas possuem apenas um caractere e são criados com aspas simples (') ao invés das duplas. 
```{julia}
typeof("a")
typeof('a')
```
Objetos do tipo `Char` possuem algumas particularidades interessantes. Por exemplo, são compatíveis com somas e subtrações, em que a diferença entre os respectivos códigos dos caracteres é calculada.
```{julia}
'A' + 1
'E' - 'C'
```
Toda essa questão dos caracteres está relacionada com *Unicode/UTF-8*, uma codficação de caracteres que inclui as letras tradicionais e diversos caracteres especiais. Para ver todos os códigos disponíveis, basta acessar [este link](https://www.charset.org/utf-8). Para utilizar um caractere por meio do código *UTF-8*, basta utilizar `\u` e em seguida o respectivo código.
```{julia}
'\u2200'
```
## Junção e separação de strings
A maneira mais elementar para unificar strings em uma é por meio do operador `*`, como se fosse realizado um produto entre as strings.
```{julia}
"banana" * " " * "pera"
```
Para unificar todas as strings dentro de um mesmo vetor, basta utilizar a função `join` e então especificar qual será o separador para os elementos.
```{julia}
frutas = ["banana", "pera", "morango"]
join(frutas, ", ")
join(frutas, "-")
```
Já para realizar o processo inverso, isto é, separar uma string em um vetor, utiliza-se a função `split`, e então se especifica qual o ponto para os cortes.
```{julia}
split("banana-pera-morando", "-")
```
Também é possível copiar uma string diversas vezes por meio da função `repeat`, que retorna uma string com o respectivo texto copiado o número de vezes que for especificado.
```{julia}
repeat("ba", 5)
```
## Busca e substituição
Para acessar partes da string, é como se fosse acessar um vetor em que cada caractere é um elemento. Podemos tanto selecionar tanto uma só posição, tornando a saída um caractere quanto selecionar uma sequência de letras, tornando a saída uma string.  
```{julia}
"abcd"[1]
"abcd"[end]
"abcd"[2:end]
```
::: {.callout-note icon=false}
### Observação
Ao extrair somente um caractere de uma stirng, a depender de como realizamos isso, a saída é um tipo diferente de objeto.
```{julia}
"abcd"[1]
"abcd"[1:1]
```
:::
A seguir, veremos algumas funções que realizam buscas dentro de strings para efetuar alguns procedimentos. Para isso, uma possibilidade é a utilização de expressões regulares. Para conhecer em detalhes a sintaxe das expressões regulares, basta acessar [este link](https://pt.wikipedia.org/wiki/Express%C3%A3o_regular). Em Julia, é possível criar uma string como sendo uma expressão regular inserindo um `r` antes das aspas.
```{julia}
r"."
```
3 funções muito úteis na detecção de elementos dentro de strings são:
- `occursin`: verifica se determinado texto está dentro da string;
- `findfirst`: extrai a posição da primeira vez que o texto aparece na string;
- `findlast`: extrai a posição da última vez que o texto aparece na string.
```{julia}
texto = "Zero ao Julia"
occursin("Julia", texto)   
findfirst("a", texto)  
findlast("a", texto)       
```
As funções `startswith` e `endswith` verificam se uma determinada string começa ou termina, respectivamente, com determinado texto. 
```{julia}
texto = "Julia"
startswith(texto, "j")
endswith(texto, "ia")
```
Também é possível substituir trechos de texto usando a função `replace`.
```{julia}
replace("banana", "a" => "o")
```

## Formatações
Para alternar as letras de uma string ente maiúsculas e minúsculas, existem 3 principais funções:
- `uppercase`: torna todas as letras maiúsculas;
- `lowercase`: torna todas as letras minúsculas;
- `titlecase`: torna a primeira letra de cada palavra maiúscula e as demais minúsculas.
```{julia}
texto = "ZERO ao julia"
uppercase(texto)
lowercase(texto)
titlecase(texto)
```
Como não existe uma função específica para deixar apenas a primeira letra da primeira palavra maiúscula e as demais minúsculas, para realizar esse processo precisamos combinar `uppercase` com `lowercase`. 
```{julia}
uppercase(texto[1]) * lowercase(texto[2:end])
```

Com a função `reverse`, é possível obter uma string de trás para frente.
```{julia}
reverse("abcde")
```
Existe uma forma bem direta de remover espaços nos começos e finais das strings. Para remover na esquerda, utiliza-se `lstrip`; na direita, `rstrip`; e nas duas direções ao mesmo tempo, `strip`.
```{julia}
lstrip("  julia  ")
rstrip("  julia  ")
strip("  julia  ")
```

## Operações numéricas e uso de variáveis dentro de strings
Por fim, é possível utilizar operações e valores de variáveis dentro das strings, isso é feito inserindo o que é de interesse entre um `$()`. 
```{julia}
a = 2
b = 5
"Soma: $(a+b)"
``` 

## Conclusão
::: justify
Portanto, manipular strings com eficiência no Julia é fundamental para análises estatísticas, pois dados reais raramente chegam prontos para análise. Ao dominar essas técnicas, você estará mais preparado para limpar, formatar e organizar informações textuais em seus projetos, integrando-as sem esforço com o restante do seu fluxo de trabalho estatístico.
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.
:::
