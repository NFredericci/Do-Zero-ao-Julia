---
title: "Manipulação de strings em Julia"
description: |
     Aprender a manipular strings em *Julia* é essencial para transformar dados brutos em informações úteis. Neste post, você vai conhecer desde os conceitos básicos até operações e formatações mais avançadas, aprendendo a organizar, padronizar e preparar seus dados de forma eficiente para qualquer análise.
categories:
  - Primeiros passos
  - Ferramentas
author:
  - name: Vitor Ribas Perrone
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/VitorRibasP
    orcid: 0009-0009-6923-7712
  - name: Nicole Fredericci
    affiliation: "Universidade Estadual de Campinas"
    url: https://github.com/NFredericci
date: "2025-09-05"
image: imagens/juliastrings.png
lang: pt
format:
  html:
    toc: true
    toc-depth: 3
    self-contained: false
engine: knitr
draft: true
---

## Introdução


::: {.justify}
Manipular strings é uma habilidade essencial em análise de dados, seja para organizar nomes de variáveis, corrigir e padronizar informações textuais ou gerar relatórios automatizados. Em *Julia*, essa tarefa é simples e poderosa, permitindo desde operações básicas até buscas complexas com expressões regulares. 

Neste post, exploraremos como criar, modificar e formatar strings utilizando apenas recursos do *Julia* base.
:::

## Criação de strings

::: {.justify}
Em *Julia*, criamos um objeto do tipo `String` colocando o texto entre aspas duplas (`"`) ou três aspas duplas (`"""`). As duas maneiras de criar o objeto são equivalentes, então sinta-se à vontade para usar a que preferir.
:::

```{julia}
"a"
"""a"""
"a" == """a"""
```

::: {.justify}
Além disso, é importante estar atento a comandos especiais, como o `\n`, que representa uma quebra de linha. Para criar um objeto que ignore qualquer caractere especial, ou seja, que contenha apenas o texto literal, basta prefixar a string com `raw` antes das aspas.
:::

```{julia}
"a
b"
print("a\nb")
print(raw"a\nb")
```

## Caracteres

::: {.justify}
Um detalhe importante em *Julia* é a distinção entre dois tipos de objetos: `String` e `Char`. Ambos representam textos, mas `Char` contém apenas um caractere e é criado com aspas simples (`'`) em vez de aspas duplas.
:::

```{julia}
typeof("a")
typeof('a')
```

::: {.justify}
Objetos do tipo `Char` possuem algumas particularidades interessantes. Por exemplo, eles são compatíveis com operações de soma e subtração, nas quais a diferença entre os códigos *Unicode* dos caracteres é calculada.
:::

```{julia}
'A' + 1
'E' - 'C'
```

::: {.justify}
O funcionamento dos caracteres está relacionado ao *Unicode/UTF-8*, uma codificação de caracteres que inclui letras tradicionais e caracteres especiais. Para conferir todos os códigos disponíveis, basta acessar [este link](https://www.charset.org/utf-8). Para utilizar um caractere por meio do código *UTF-8*, basta utilizar `\u` seguido do respectivo código.
:::

```{julia}
'\u2200'
```

## Junção e separação 

::: {.justify}
A maneira mais básica de unir strings é por meio do operador `*`, que combina os textos em uma única string.
:::

```{julia}
"banana" * " " * "pera"
```

::: {.justify}
Para unificar todas as strings contidas em um vetor, basta utilizar a função `join` e especificar qual será o separador entre os elementos. E para realizar o processo inverso, ou seja, separar uma string em um vetor, utiliza-se a função `split`, especificando o ponto em que os cortes devem ser feitos.
:::

```{julia}
frutas = ["banana", "pera", "morango"]
join(frutas, ", ")
join(frutas, "-")
split("banana-pera-morango", "-")
```

::: {.justify}
Também é possível copiar uma string várias vezes por meio da função `repeat`, que retorna uma nova string com o texto replicado pelo número de vezes especificado.
:::

```{julia}
repeat("ba", 5)
```

## Busca e substituição

::: {.justify}
Para acessar partes de uma string, o processo é semelhante ao acesso a um vetor, em que cada caractere é tratado como um elemento. Podemos tanto selecionar uma única posição, obtendo um `Char`, ou uma sequência de caracteres, resultando em uma nova string. 
:::

```{julia}
"abcd"[1]     # Primeiro elemento
"abcd"[end]   # Último elemento
"abcd"[2:end] # Do segundo ao último elemento
```

::: {.callout-note icon=false}
### Observação

Ao extrair apenas um caractere de uma string, o tipo de objeto retornado pode variar a depender da forma como a extração é realizada.

```{julia}
"abcd"[1]   # Char
"abcd"[1:1] # String
```
:::

::: {.justify}
Em *Julia*, é possível realizar buscas dentro de strings de diferentes maneiras. Uma abordagem mais avançada é o uso de expressões regulares, que permitem buscar padrões complexos de texto. Podemos criar uma expressão regular prefixando a string com a letra `r`.
:::

```{julia}
r"." # Metacaractere que corresponde a qualquer caractere
```

::: {.justify}
Para aprender mais sobre a sintaxe completa de expressões regulares, você pode acessar [este link](https://pt.wikipedia.org/wiki/Express%C3%A3o_regular). No entanto, Julia também oferece funções simples para buscar texto diretamente, sem precisar de regex:

- `occursin`: verifica se determinado texto está presente na string.
- `findfirst`: retorna a posição da primeira ocorrência do texto na string.
- `findlast`: retorna a posição da última ocorrência do texto na string.
:::

```{julia}
texto = "Zero ao Julia"
occursin("Julia", texto)   
findfirst("a", texto)  
findlast("a", texto)       
```

::: {.justify}
As funções `startswith` e `endswith` verificam, respectivamente, se uma string começa ou termina com um determinado texto.
:::

```{julia}
texto = "Julia"
startswith(texto, "j")
endswith(texto, "ia")
```

::: {.justify}
Também é possível substituir trechos de texto em uma string utilizando a função `replace`.
:::

```{julia}
replace("banana", "a" => "o")
```

## Formatações

::: {.justify}
Para alternar as letras de uma string entre maiúsculas e minúsculas, existem três funções principais:

- `uppercase`: converte todas as letras para maiúsculas.
- `lowercase`: converte todas as letras para minúsculas.
- `titlecase`: converte a primeira letra de cada palavra para maiúscula e as demais para minúscula.
:::

```{julia}
texto = "ZERO ao julia"
uppercase(texto)
lowercase(texto)
titlecase(texto)
```

::: {.justify}
Como não existe uma função específica para capitalizar apenas a primeira letra da string (deixando as demais minúsculas), é necessário combinar `uppercase` com `lowercase` para realizar esse processo. 
:::

```{julia}
uppercase(texto[1]) * lowercase(texto[2:end])
```

::: {.justify}
Além disso, com a função `reverse`, é possível obter os caracteres de uma string em ordem inversa.
:::

```{julia}
reverse("abcde")
```

::: {.justify}
Também é possível remover espaços em branco de uma string de maneira simples. Para eliminar espaços apenas no início, utiliza-se `lstrip`; apenas no final, `rstrip`; e em ambas as extremidades, `strip`.
:::

```{julia}
lstrip("  julia  ")
rstrip("  julia  ")
strip("  julia  ")
```

## Interpolação com variáveis e números

::: {.justify}
Por fim, é possível inserir expressões e valores de variáveis diretamente dentro de strings usando a sintaxe `$()`. 
:::

```{julia}
a = 2
b = 5
"Soma: $(a+b)"
``` 

## Conclusão

::: {.justify}
Portanto, manipular strings com eficiência em *Julia* é essencial, já que dados raramente chegam prontos para análise. Ao dominar essas técnicas, você poderá limpar, formatar e organizar informações textuais com facilidade, utilizando-as de forma natural em seus projetos.
:::

::: callout-note
Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.
:::
