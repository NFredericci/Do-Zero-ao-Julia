{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Manipulação de datas em Julia\"\n",
        "description: |\n",
        "     Aprenda a manipular datas em Julia, desde a criação de objetos até operações aritméticas.\n",
        "categories:\n",
        "  - Primeiros passos\n",
        "  - Ferramentas\n",
        "author:\n",
        "  - name: Vitor Ribas Perrone\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/VitorRibasP\n",
        "    orcid: 0009-0009-6923-7712\n",
        "date: \"2025-08-06\"\n",
        "image: imagens/juliadatas.png\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "::: justify\n",
        "Manipular datas é uma tarefa essencial em diversas áreas da Estatística aplicada, desde a análise de séries temporais, análise de sobrevivência, entre outras. Sendo asism, Julia nos fornece diversas ferramentas para trabalhar com datas. \n",
        "\n",
        "Neste post, vamos explorar como trabalhar com datas e horários em Julia utilizando o módulo `Dates`, que já faz parte da biblioteca padrão da linguagem. Você aprenderá a criar, manipular, extrair informações e realizar operações com objetos de data.\n",
        ":::\n",
        "\n",
        "## Criação de objetos de data\n",
        "Em primeiro lugar, é necessário carregar o módulo `Dates`, já presente no Julia base.\n",
        "\n",
        "```{julia}\n",
        "using Dates\n",
        "```\n",
        "\n",
        "Existem duas principais estruturas para representar datas em Julia:\n",
        "- `Date`: representa apenas ano, mês e dia.\n",
        "- `DateTime`: inclui também hora, minuto, segundo, etc.\n",
        "Podemos criar cada uma dessas estruturas por meio de funções de mesmo nome.\n",
        "\n",
        "```{julia}\n",
        "Date(2013,3,25)\n",
        "DateTime(2013,3,25)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Você também pode criar esses objetos a partir de uma `String` com o formato correspondente:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "Date(\"2015-03-25\", dateformat\"y-m-d\")\n",
        "DateTime(\"2015/03/25 14:30\", dateformat\"y/m/d HH:MM\")\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Para obter a data e hora atual do sistema, podemos utilizar as funções `today` e `now`.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "today()\n",
        "now()\n",
        "```\n",
        "\n",
        "## Acessar partes específicas da data\n",
        "::: justify\n",
        "Também existem algumas funções para extrair informações a partir de uma data. Para exemplificar, vamos criar um objeto chamado `data`.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "data = Date(\"2015-03-25\", dateformat\"y-m-d\")\n",
        "```\n",
        "\n",
        "::: justify\n",
        "É possível extrair diretamente partes específicas das datas por meio de funções com o nome dessas partes, como `year` e `month`.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "year(data)\n",
        "month(data)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Também existem funções que retornam múltiplos componentes ao mesmo tempo, como `yearmonth` e `yearmonthday`.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "yearmonth(data)\n",
        "yearmonthday(data)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Além de extrair elementos da numeração da data, também é possível obter informações em texto, como o nome do dia da semana e o nome do mês.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "dayname(data)\n",
        "monthname(data)\n",
        "```\n",
        "\n",
        "\n",
        "## Informações de calendário\n",
        "::: justify\n",
        "Também existem algumas funções para verificações de fatos relacionados ao calendário, como `isleapyear`, que indica se o ano é bissexto e `daysinmonth`, que retorna o número de dias que aquele mês possui.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "isleapyear(data) \n",
        "daysinmonth(data)\n",
        "```\n",
        "\n",
        "\n",
        "## Quantias de tempo\n",
        "::: justify\n",
        "Também é possível criar objetos que representam quantias de tempo, que posteriormente serão utilizadas para algumas operações e manipulações. \n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "Year(5)\n",
        "Day(7)\n",
        "Nanosecond(200)\n",
        "```\n",
        "\n",
        "\n",
        "## Operações com datas\n",
        "::: justify\n",
        "Existem diversas operações que são possíveis com datas. Para exemplificá-las, usaremos as seguintes datas. \n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "data1 = Date(2010, 11, 30) \n",
        "data2 = Date(2011, 12, 25)\n",
        "```\n",
        "\n",
        "Podemos calcular a diferença em dias de duas datas distintas. \n",
        "\n",
        "```{julia}\n",
        "data2 - data1\n",
        "data1 - data2\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Também podemos utilizar aqueles objetos de quantia de tempo para somar ou subtrair às datas de interesse. \n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "data1\n",
        "data1 + Day(7)\n",
        "data1 - Year(2)\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Além disso, é possível realizar a comparação direta entre duas datas, verificando se uma desigualdade é verdadeira ou não.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "data1 < data2\n",
        "```\n",
        "\n",
        "::: justify\n",
        "Também é possível criar intervalos entre duas datas, especificando a unidade de incremento, como dias ou anos.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "collect(Date(2020, 03, 02):Day(1):Date(2020, 03, 10))\n",
        "```\n",
        "\n",
        "```{julia}\n",
        "collect(Date(2020, 03, 02):Year(1):Date(2025, 03, 02))\n",
        "```\n",
        "\n",
        "\n",
        "## Conclusão\n",
        "::: justify\n",
        "Portanto, você já sabe como criar, acessar, manipular e operar com datas em Julia! Esse conhecimento é essencial para análises estatísticas que envolvem o fator tempo, como séries temporais.\n",
        ":::\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::"
      ],
      "id": "4fbedaf1"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}