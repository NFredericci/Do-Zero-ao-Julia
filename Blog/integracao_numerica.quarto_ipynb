{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Integração Numérica em Julia\"\n",
        "description: |\n",
        "     Aprenda a resolver integrais numericamente em Julia, desde funções univariadas até multivariadas de forma muito fácil e eficiente.\n",
        "categories:\n",
        "  - Ferramentas\n",
        "author:\n",
        "  - name: Vitor Ribas Perrone\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/VitorRibasP\n",
        "    orcid: 0009-0009-6923-7712\n",
        "date: \"2025-08-14\"\n",
        "image: imagens/integraisnumericas.png\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introdução\n",
        "::: justify\n",
        "Resolver integrais é parte fundamental da Estatística para diversas tarefas, como o cálculo de probabilidades, mas muitas vezes uma solução analítica não é possível ou viável. Felizmente, podemos obter uma aproximação do valor real por meio de métodos de integração numérica. Felizmente, em Julia conseguimos fazer isso de maneira muito fácil.\n",
        "Sendo assim, neste post, vamos aprender a realizar integrais numéricas em Julia de uma maneira muito simples e eficiente. \n",
        ":::\n",
        "\n",
        "## Funções de uma variável\n",
        "::: justify\n",
        "Para realizar integração numérica de funções de uma variável, utilizaremos o pacote `QuadGK`. Vamos instalá-lo e carregá-lo:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "Pkg.add(\"QuadGK\")\n",
        "using QuadGK\n",
        "```\n",
        "\n",
        "::: justify\n",
        "O `QuadGK` implementa o método de quadratura adaptativa Gauss–Kronrod, cujos detalhes podem ser encontrados [neste link](https://en.wikipedia.org/wiki/Gauss%E2%80%93Kronrod_quadrature_formula).\n",
        "O uso é simples: definimos a função que desejamos integrar e utilizamos `quadgk`, inserindo como argumentos a função e o intervalo de integração. A função retorna a estimativa da integral e uma estimativa do erro numérico.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "f(x) = x^2 * exp(-x)\n",
        "quadgk(f, 0, 5)\n",
        "```\n",
        "\n",
        "\n",
        "## Funções de várias variáveis\n",
        "::: justify\n",
        "Para integrais envolvendo funções de múltiplas variáveis, vamos utilizar o pacote Cubature:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "Pkg.add(\"Cubature\")\n",
        "using Cubature \n",
        "```\n",
        "\n",
        "::: justify\n",
        "O `Cubature` oferece dois métodos principais: h-adaptativo e p-adaptativo, descritos na [documentação oficial](https://github.com/JuliaMath/Cubature.jl). \n",
        "O método h-adaptativo pode ser utilizado com a função `hcubature`, que recebe a função de interesse e vetores com os limites inferiores e superiores de integração. Também obtemos a estimativa da integral e do erro.\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "f(v) = v[1]^2 + v[2]^2\n",
        "hcubature(f, [0.0, 0.0], [1.0, 1.0])\n",
        "```\n",
        "\n",
        "::: justify\n",
        "O método p-adaptativo é muito semelhante, mas utiliza a função `pcubature`:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "f(v) = v[1]^2 + v[2]^2\n",
        "pcubature(f, [0.0, 0.0], [1.0, 1.0])\n",
        "```\n",
        "\n",
        "\n",
        "## Densidade da Normal\n",
        "::: justify\n",
        "Como exemplo de aplicação estatística, podemos calcular a integral da função densidade de probabilidade de uma distribuição Normal padrão, \"verificando\" que sua área é igual a 1:\n",
        ":::\n",
        "\n",
        "```{julia}\n",
        "f(x) = 1/(sqrt(2*pi))*exp(-x^2/2)\n",
        "quadgk(f, -Inf, Inf)\n",
        "```\n",
        "\n",
        "## Conclusão\n",
        "::: justify\n",
        "Portanto, com esta ferramenta poderosa e fácil de usar, agora você consegue resolver suas integrais numéricas utilizando Julia. Seja para funções simples ou para cálculos multidimensionais complexos, esses recursos ampliam significativamente suas possibilidades em análises estatísticas, permitindo obter resultados precisos e confiáveis mesmo quando a solução analítica não é viável.\n",
        ":::\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::  "
      ],
      "id": "78230e27"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}