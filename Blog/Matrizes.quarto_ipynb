{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Matrizes em Julia\"\n",
        "description: |\n",
        "  Guia para iniciantes sobre a utilização de matrizes em Julia\n",
        "categories:\n",
        "  - Guia\n",
        "author:\n",
        "  - name: Caio Frare\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://github.com/caiofrare\n",
        "  - name: Carlos Trucíos\n",
        "    affiliation: \"Universidade Estadual de Campinas\"\n",
        "    url: https://ctruciosm.github.io\n",
        "    orcid: 0000-0001-8746-8877\n",
        "date: \"2025-06-11\"\n",
        "image: imagens/matriz.png ############# TROCAR\n",
        "lang: pt\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    self-contained: false\n",
        "draft: true\n",
        "---\n",
        "\n",
        "\n",
        "## O que são Matrizes?\n",
        "\n",
        "Matrizes são estruturas matemáticas em formato tabular, organizadas em linhas e colunas, com operações bem definidas como adição, subtração e multiplicação.\n",
        "\n",
        "São amplamente utilizadas para armazenar dados e têm papel central em áreas como álgebra linear e métodos de Machine Learning.\n",
        "\n",
        "Podem ser vistas como uma espécie de vetor em duas dimensões.\n",
        "\n",
        "Em Julia, a notação tradicional de matrizes utiliza colchetes [ ]. O espaço é usado para separar as colunas, enquanto o ponto e vírgula (;) separa as linhas, e o triplo ponto e vírgula (;;;) separa os \"andares\" (terceira dimensão).\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "# vetor (1D)\n",
        "v = [1 2 3 4 5 6]\n",
        "\n",
        "# matriz (2D)\n",
        "m = [1 2 3; 4 5 6]\n",
        "\n",
        "# matriz (3D)\n",
        "M = [1 2 3; 4 5 6; 7 8 9 ;;; 10 11 12; 13 14 15; 16 17 18]\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Criando de Outras Formas\n",
        "\n",
        "Além de escrever manualmente com colchetes, Julia oferece funções que facilitam a criação de matrizes com formatos específicos ou automáticos. Aqui estão algumas das mais comuns:\n",
        "\n",
        "- zeros(m, n): cria uma matriz m × n preenchida com zeros.\n",
        "\n",
        "- ones(m, n): cria uma matriz m × n preenchida com uns.\n",
        "\n",
        "- rand(m, n): gera uma matriz m × n com valores aleatórios entre 0 e 1.\n",
        "\n",
        "- reshape(v, m, n): transforma um vetor(v) ou matriz existente em uma nova forma m × n.\n",
        "\n",
        "- Matrix(...): converte estruturas em matriz, como por exemplo Matrix(I, m, m) para identidade.\n",
        " \n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "# 2x3 matriz de zeros\n",
        "A = zeros(2, 3)\n",
        "\n",
        "# 3x2 matriz de uns\n",
        "B = ones(3, 2)\n",
        "\n",
        "# 2x2 matriz aleatória\n",
        "C = rand(2, 2)\n",
        "\n",
        "# reshape de vetor para matriz 2x3\n",
        "v = 1:6\n",
        "D = reshape(v, 2, 3)\n",
        "\n",
        "# matriz identidade 4x4 especificando o formato dos dados\n",
        "E = Matrix{Float64}(I, 4, 4)\n",
        "\n",
        "# matriz 3x2 gerada por compreensão\n",
        "F = [i + j for i in 1:3, j in 1:2]\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Indexação e Acesso a Elementos\n",
        "\n",
        "Assim como em R, a indexação em Julia é 1-based, ou seja, começa do 1 — diferente do Python, que utiliza 0-based indexing.\n",
        "\n",
        "Para acessar os elementos de uma matriz, usamos a notação matriz[linha, coluna]. Também é possível acessar linhas inteiras, colunas inteiras ou subconjuntos da matriz usando os dois-pontos (:).\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "# matrix 3x3\n",
        "m1 = reshape(1:9, 3, 3)\n",
        "\n",
        "# Acessa o elemento da 1ª linha, 2ª coluna → 4\n",
        "m1[1, 2]\n",
        "\n",
        "# Acessa o elemento da 3ª linha, 3ª coluna → 9\n",
        "m1[3, 3]\n",
        "\n",
        "# Acessa toda a 2ª linha → [2 5 8]\n",
        "m1[2,:]\n",
        "\n",
        "# Acessa toda a 1ª coluna → [1 2 3]\n",
        "m1[:, 1]\n",
        "\n",
        "# Acessa um bloco 2x2 → [4 7; 5 8]\n",
        "m1[1:2, 2:3]\n",
        "```\n",
        "\n",
        "\n",
        "## Operações\n",
        "\n",
        "Julia permite realizar operações matemáticas entre matrizes de forma simples e direta, desde que as dimensões sejam compatíveis.\n",
        "\n",
        "### Adição e Subtração\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "G = [1 2; 3 4]\n",
        "H = [5 6; 7 8]\n",
        "\n",
        "G + H  # Soma\n",
        "G - H  # Subtração\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "### Multiplicação\n",
        "\n",
        "Julia diferencia dois tipos de multiplicação:\n",
        "\n",
        "- *: multiplicação matricial (produto linear) e multiplicação por escalar;\n",
        "\n",
        "- .*: multiplicação elemento a elemento.\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "# Multiplicação matricial\n",
        "G * H\n",
        "\n",
        "# Multiplicação elemento a elemento\n",
        "G .* H\n",
        "\n",
        "# Multiplicação da Matrix G pelo escalar 2\n",
        "G * 2\n",
        "\n",
        "```\n",
        "\n",
        "### Transposição\n",
        "\n",
        "Existem também maneiras para transpor uma matriz (trocar linhas por colunas):\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplo\n",
        "\n",
        "# Transposição real\n",
        "transpose(G)\n",
        "\n",
        "# Atalho (funciona bem para números reais, mas pode não funcionar para complexos)\n",
        "G'\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Propriedas e Funções Úteis\n",
        "\n",
        "Usando o pacote `LinearAlgebra`, que já vem incluído na instalação padrão do Julia, podemos acessar várias propriedades e aplicar funções úteis às matrizes.\n",
        "\n",
        "### Propriedades Básicas\n",
        "\n",
        "- size(m): retorna uma tupla com o número de linhas e colunas.\n",
        "\n",
        "- length(m): retorna o número total de elementos.\n",
        "\n",
        "- eltype(m): retorna o tipo dos elementos da matriz.\n",
        "\n",
        "- ndims(m): retorna o número de dimensões (normalmente 2 para matrizes).\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "using LinearAlgebra\n",
        "\n",
        "# matrix 2x2\n",
        "J = [1 2; 3 4]\n",
        "\n",
        "# (2, 2)\n",
        "size(J)\n",
        "\n",
        "# 4\n",
        "length(J)\n",
        "\n",
        "# Int64\n",
        "eltype(J)\n",
        "\n",
        " # 2\n",
        "ndims(J)\n",
        "```\n",
        "\n",
        "\n",
        "### Operações em Algebra Linear\n",
        "\n",
        "- det(m): determinante.\n",
        "\n",
        "- inv(m): inversa (se existir).\n",
        "\n",
        "- rank(m): posto (número de linhas/colunas linearmente independentes).\n",
        "\n",
        "- eigvals(m): autovalores.\n",
        "\n",
        "- eigvecs(m): autovetores.\n",
        "\n",
        "- tr(m): traço da matrix (soma da diagonal principal).\n",
        "\n",
        "\n",
        "```{julia}\n",
        "# Exemplos\n",
        "\n",
        "using LinearAlgebra\n",
        "\n",
        "# matrix 2x2\n",
        "J = [1 2; 3 4]\n",
        "\n",
        "# -2.0\n",
        "det(J)\n",
        "\n",
        "# [-2.0 1.0; 1.5 -0.5]\n",
        "inv(J)\n",
        "\n",
        "# 2\n",
        "rank(J)\n",
        "\n",
        "# [-0.372, 5.372]\n",
        "eigvals(J)\n",
        "\n",
        "# -0.3722813232690143 e 5.372281323269014\n",
        "eigvecs(J)\n",
        "\n",
        "# 5 (1 + 4)\n",
        "tr(J)\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Conclusão\n",
        "\n",
        "Este foi um guia básico sobre o uso de matrizes em Julia, cobrindo desde a criação até operações fundamentais e funções úteis com o pacote `LinearAlgebra`.\n",
        "\n",
        "Matrizes são estruturas centrais em muitas aplicações científicas e computacionais, e Julia oferece ferramentas poderosas e eficientes para manipulá-las de forma intuitiva.\n",
        "\n",
        "Nos próximos posts, podemos explorar tópicos mais avançados como sistemas lineares, decomposições matriciais e uso de matrizes em machine learning. Até lá!\n",
        "\n",
        "::: callout-note\n",
        "Ferramentas de IA foram utilizadas para correção ortográfica e aprimoramento do texto.\n",
        ":::"
      ],
      "id": "776d1038"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}